[{"path":"index.html","id":"about","chapter":"1 About","heading":"1 About","text":"BEGIN pitch()ever wondered colleagues can look computer programming script, little prior knowledge language, read , help fix code? ’s know programming languages, programming languages use concepts logic.STRUCTURE(workshop)interactive workshop, attendees gain hands-experience understand interpret programming logic. cover fundamental topics programming including: conditional statements, loops, order operations logical flow, functions arguments, data types. Attendees practice formulating programming arguments accomplish common tasks, subsetting data based set conditions.prior_experience == FALSENo coding experience required! Programming logic transferable across specific languages, learners focus concepts, rather specific syntax specific language. Attendees learn interpret programming logic build confidence apply understanding various programming languages may encounter.(x example1:example5) {annotate(x)}provide real world examples programming logic practice, workshop integrate hands-work time examples sample code written R, Python, SQL, Stata, languages. Attendees practice annotating code human understandable language discuss process, pitfalls, peers instructors.attendee_need == “learn_programming_logic”: print(“register workshop!”)","code":""},{"path":"intro.html","id":"intro","chapter":"2 Introduction","heading":"2 Introduction","text":"different type programming workshop. One doesn’t require computer, instead intends help build mental models computer programming works. learn logic behind programming, also methods identifying errors algorithms code computer doesn’t see. technology required, besides ability view lesson, something write piece paper.","code":""},{"path":"intro.html","id":"building-a-mental-model","chapter":"2 Introduction","heading":"2.1 Building a Mental Model","text":"experience computational consultations often student researchers take someone else’s code try adapt research, use code without knowing . means ’re unable easily update script, create errors don’t know address, even import errors already script. Sometimes can’t even adapt use original data different location computer. can’t really read code, reliant computer reading code.purpose workshop isn’t just introduce programming logic, ’s provide safe space practice thinking computer tracing algorithms code snippets instead computer just .","code":""},{"path":"intro.html","id":"a-note-on-syntax","chapter":"2 Introduction","heading":"2.2 A Note on Syntax","text":"Syntax formal structural computer programming language. Assembly, C/C++, C#, Python, R formal language structures computer knows read code. , sometimes syntax gets way learning concepts. Luckily, programming concepts across languages.syntax use examples something called psuedocode. Pseudocode focuses concepts tasks, syntax. don’t need worry semicolon parenthesis place write psuedocode, ’ll still know interpret written.also introduce programming examples different languages, can start recognize similarities differences languages. won’t expert end workshop, help build skillset hopefully ’re comfortable reading known (unknown) computer languages.","code":""},{"path":"algorithms.html","id":"algorithms","chapter":"3 Algorithms","heading":"3 Algorithms","text":"","code":""},{"path":"algorithms.html","id":"what-are-algorithms","chapter":"3 Algorithms","heading":"3.1 What Are Algorithms","text":"people heard term algorithm, especially relation AI social media feeds, algorithm? algorithm set instructions something. AI, term algorithm often used term represent overall way whatever AI ’re working trained . social media feeds, algorithm determine select content delivered user. Algorithms can simple complex.common analogy algorithm recipe. recipe includes set ingredients, like variables code, lists instructions ingredients. , big difference common recipes used seeing algorithm exact specific tell computer something. isn’t enough tell computer, “get data.” tell data located, format , read , format want data use script. let’s example recipe make cheesy mashed potatoes.steps easy enough.Take potatoes boil ’re done.Drain.Add butter, milk, salt/pepper taste.Mash.Fold cheese.Eat.us know infer instructions missing. , computers stupid. need explicitly told something.many potatoes? boil mean? done mean? (also question asked mom reading grandmother’s recipes.)Computer code needs explicit complete. Let’s see looks like first part algorithm.Algorithm peeling potatoes Cheesy Mashed PotatoesGet three pounds russet potatoes.Get bowl large enough hold three pounds russet potatoes.Get vegetable peeler.Take one potato.Peel potato.Rinse potato water.Place peeled potato bowlRepeat 4-7 potatoes washed peeledWhen start breaking process specific actions can get quite long, ’re listing large complex overall task simple ones can done one action time.Essentially, ’s computer processors - one action time. Computers multi-core processors can multiple actions simultaneously, one action core. ’s just computer fast, looks like ’s everything , still just executes commands step step.","code":""},{"path":"algorithms.html","id":"breakout-activity","chapter":"3 Algorithms","heading":"3.2 Breakout Activity","text":"(20 Min?)activity, write algorithm make popcorn. Sounds simple, right? “Make popcorn” something people least general understanding . scenario, ’re providing step--step directions computer understand make popcorn computer need told every action take, order successfully make popcorn.task write step needed make popcorn.write steps group, consider:opening container point?making microwave popcorn, using stove?much time needed make popcorn?computer popcorn starts burning?","code":""},{"path":"data-types.html","id":"data-types","chapter":"4 Data types","heading":"4 Data types","text":"word people use lot referring computer code variables, variable? variable placeholder type data used computer code.ingredients <- cheddar cheese, potatoes, milk, salt, butterWe use variables represent data used ’s easy change ,ingredients <- smoked gouda cheese, potatoes, milk, salt, butterand also easy build mental model different variables interrelate.simple example use variables describe equation. common rule naming variables represent data .talk data types variables.data types data structures.use food analogy","code":""},{"path":"data-types.html","id":"exercise---who-knows","chapter":"4 Data types","heading":"4.1 Exercise - Who knows","text":"","code":""},{"path":"loops.html","id":"loops","chapter":"5 Loops","heading":"5 Loops","text":"Drawing Introduction Programming Logic(Lynne O’Hanlon 2000)\nStart loop first function term\n“Populate array loop” early example; pg 376 blank table good early exercise.\nSide note infinite loop, importance settling bounds\nhappens don’t tell loop increase?\nExamples loops multiple languages (Python, C, R)?\ndecide: theory practice, theory/practice/theory/practice?\nAlso writing result iteration otherwise ’ll get last result (common problem)","code":""},{"path":"loops.html","id":"exercise---loop-trace","chapter":"5 Loops","heading":"5.1 Exercise - loop trace","text":"Grab pen paper write output iteration loop:","code":"for x in 0 to 5 \n  write x\n  "},{"path":"loops.html","id":"exercise---populate-an-array","chapter":"5 Loops","heading":"5.2 Exercise - populate an array","text":"Let’s use loop populate array.’ll start empty array called table 4 rows columns named , B, C, D, E:want populate table numbers, starting 1 increasing sequentially (1, 2, 3, 4, etc.). want fill row completely moving start filling next row.loop:[[adapt programming logic book exercise loop]]Grab pen paper (spreadsheet program like Google Sheets Excel) manually fill empty cells array.number cell A1?number cell B2?number cell D4?","code":""},{"path":"loops.html","id":"other-types-of-loops","chapter":"5 Loops","heading":"5.3 Other Types of Loops","text":"types loops addition commonly used loop. loop uses condition start loop determine, advance, loop stop. example, recall initial loop:equivalent loop look like:Another type loop loop (check end) loop (check end).","code":"for x in 0 to 5 \n  write x\n  \n"},{"path":"loops.html","id":"caveats","chapter":"5 Loops","heading":"5.4 Caveats","text":"Loops frequently encountered concept programming come set common issues.","code":""},{"path":"loops.html","id":"infinite-loops","chapter":"5 Loops","heading":"5.4.1 Infinite loops","text":"condition never false otherwise break","code":""},{"path":"loops.html","id":"overwriting-outputs","chapter":"5 Loops","heading":"5.4.2 Overwriting outputs","text":"","code":"for x in 0 to 5 \n  answer = x\n\nwrite answer\n  "},{"path":"conditionals-and-making-choices.html","id":"conditionals-and-making-choices","chapter":"6 Conditionals and Making Choices","heading":"6 Conditionals and Making Choices","text":"Many times programming, want take certain action certain condition satisfied., can use conditional statements. commonly used format conditional statement programming statement, often combined else statement.structure tells program check condition next step depends whether condition true, false. can think narrative statement: “condition true, action X. condition true, action Y.”programming format, narrative statement look like:Note else used equivalent “true”, meaning == FALSE.limited single TRUE/FALSE check else statement, actions limited “x true, y scenarios”.else (written elif programming languages) concept allows us add another sequential check statement true. updated narrative statement might : “condition true, action X. condition B true, action Z. neither condition condition B true, action Y.”programming format, updated narrative statement look like:","code":"IF conditionA == TRUE, do X\nELSE do Y\nIF conditionA == TRUE, do X\nELSE IF conditionB == TRUE, do Z\nELSE do Y\n"},{"path":"conditionals-and-making-choices.html","id":"boolean-operators","chapter":"6 Conditionals and Making Choices","heading":"6.1 Boolean Operators","text":"programming, things boil true false. (Sometimes may see true/false capitalized TRUE FALSE, concept .)Programming uses Boolean operators :(may also see & used)(may also see | used)(may also see ! indicate negation, instance != “equal”)equals (also ==)\n[SL note: Boolean operator lists include , , - include EQUALS keep separate part testing true/false?]\n[SL note: Boolean operator lists include , , - include EQUALS keep separate part testing true/false?]","code":""},{"path":"conditionals-and-making-choices.html","id":"exercise---ifelse-trace","chapter":"6 Conditionals and Making Choices","heading":"6.2 Exercise - ifelse trace","text":"Let’s look examples conditional statements practice.first trace, set values x y :printed output ifelse section?reset x y :","code":"if x == y:\n  print(\"values are equal\")\nelse if x > y:\n  print(\"x greater than y\")\nelse:\n  print(\"x must be less than y\")\n  x <- 37\ny <- 42\nx <- 75\ny <- 9\n"},{"path":"conditionals-and-making-choices.html","id":"caveats-1","chapter":"6 Conditionals and Making Choices","heading":"6.3 Caveats","text":"","code":""},{"path":"conditionals-and-making-choices.html","id":"order-of-operations","chapter":"6 Conditionals and Making Choices","heading":"6.3.1 Order of operations","text":"Order operations critical conditionals. computer go condition order, early condition satisfied, statement conclude check conditions.[[insert example ]]","code":""},{"path":"conditionals-and-making-choices.html","id":"matching-parentheses","chapter":"6 Conditionals and Making Choices","heading":"6.3.2 Matching parentheses","text":"complex nested conditionals, sure use parentheses, sure parentheses matched properly.code , without closing parentheses “equal”, continue expect input.far programming language concerned, haven’t finished statement. , wait run “completed thought”, speak, provided syntax (, )) indicating statement complete program ready run.Alternately, mismatched parentheses, result may error.case, extra closing parentheses ) print(\"values equal\") doesn’t matching ( anywhere statement. resulting error look like:","code":"if (x == y) \n  print(\"values are equal\"\n  if (x == y) \n  print(\"values are equal\"))\n  Error: unexpected ')' in:\n\"if (x == y) {\n    print(\"values are equal\"))\"\n    "},{"path":"conditionals-and-making-choices.html","id":"formatting-may-vary","chapter":"6 Conditionals and Making Choices","heading":"6.3.3 Formatting may vary","text":"Programming languages may specific formatting conditional statements. may mean certain brackets must used, new lines required sections, tab indents needed.example, Python expects : end section ifelse statement, uses elif else , requires indentation indicate action section:contract, R makes use curly brackets {} indicate section ifelse statement indentation convention readability, technically required code run:[[Note self: add another 1 2 language examples show similarities differences formatting]]","code":"if x == y:\n  print(\"values are equal\")\nelif x > y:\n  print(\"x greater than y\")\nelse:\n  print(\"x must be less than y\")\nif (x == y) {\n  print(\"values are equal\")\n} else if (x > y) {\n  print(\"x greater than y\")\n} else {\n  print(\"x must be less than y\")\n}\n"},{"path":"functions.html","id":"functions","chapter":"7 Functions","heading":"7 Functions","text":"“function” programming piece code specific task.Consider example calculating mean set values. one hand, write code manually add value divide number values.\nhand, plan take mean set values often, easier function task without needing manually write every time.","code":"values = (2, 4, 7, 5, 9)\n\nmean_value = (2 + 4 + 7 + 5 + 9) / 5[SL:insert pseucode to calculate mean without using sum() or len(), use a for loop maybe to call back? although I keep coming back to using len() at least...]\n"},{"path":"functions.html","id":"arguments","chapter":"7 Functions","heading":"7.1 Arguments","text":"function, “arguments” inputs can specify. mean() function, primary argument kind input put : mean(x) x list vector values. Another argument might option handle missing NA values: mean(x, na.rm = FALSE) default value na.rm FALSE, indicating NA values removed calculation. Optional arguments like may come pre-supplied default, case na.rm = FALSE NAvalues retained, unless argument manually changed TRUE.important understand () arguments function (b) arguments optional defaults . function run long non-optional arguments completed (, input specified), resulting output may match expectations unless understand optional arguments included, default values .example, let’s return mean() function arguments input (mandatory) handling NA values (optional).input mandatory argument specifying input:output function NA, retain NA values - default mean() function, mean necessary NA. computer, sum set values plus NA always NA, taking mean NA also return NA.Conversely, specify want remove NA values mean calculation:Now output 5.4 mean values exlucding NA.","code":"values <- c(2, 4, 7, 5, 9, NA)\nmean(values)\nvalues <- c(2, 4, 7, 5, 9, NA)\nmean(values, na.rm = TRUE)\n"},{"path":"functions.html","id":"libraries","chapter":"7 Functions","heading":"7.2 Libraries","text":"Programming languages variety functions common tasks ready use without additional work. called “built ” functions available use right away.However, built functions often limited basic tasks include complex custom functions may use. Now, can code complex functions , building built functions, take lot time require -depth programming knowledge.good news programming languages optional “libraries” (packages, modules, depending term programming language choice uses) include additional functions, beyond built function. creating new function scratch, worthwhile check whether library exists includes function want .can think programming libraries serving role similar actual libraries. instance, don’t need memorize every historical event, write favorite novel scratch - can check book library read learn !way, computer programming language choice doesn’t need always every single function hand, take lot space. Instead, can “check ” (load) “book” (collection functions) created another person. can use additional functions way function.set saves computer disk space, ensures don’t recreate wheel make every function scratch, provides level standardization (e.g., everyone uses reference “book” output input, across users).good rule thumb seems like function want broadly useful, someone likely created library containing . also true niche domain-specific functions: task one comes lot analysis, likely library functions analysis tasks.Finding ‘right’ library function need can overwhelming, good starting point official library collection programming language, CRAN R PyPI Python.","code":""},{"path":"functions.html","id":"accessing-functions-in-libraries","chapter":"7 Functions","heading":"7.3 Accessing functions in libraries","text":"syntax accessing functions libraries varies programming language follows general process :Install library source. need .Load import library. need every time want access function library. convention, libraries loaded top script, , people, can see glance libraries needed run script.Use functions normal.","code":""},{"path":"functions.html","id":"caveats-2","chapter":"7 Functions","heading":"7.3.1 Caveats","text":"","code":""},{"path":"functions.html","id":"function-names","chapter":"7 Functions","heading":"7.3.2 Function names","text":"many function names make sense English language, may functions different libraries name. programming language know function trying access? default, language use function recently loaded imported package.Let’s say two mean() functions, one library one library B. differ default settings:library defauls na.rm = TRUElibrary B defaults na.rm = FALSEIf load libraries order B use mean() function, using mean() function library B.result NA.Conversely, load library B library , use mean() function library .value 5.4.tricky part happens invisibly. may may - depending programming language - warning two libraries contain functions name. , keeping track order loading important. get unexpected results, can double check library function using .alternative method explicit function calling. programming languages allow syntax along lines library:function() specify use function stated library.","code":"load(A)\nload(B)\n\nvalues <- c(2, 4, 7, 5, 9, NA)\nmean(values)\nload(B)\nload(A)\n\nvalues <- c(2, 4, 7, 5, 9, NA)\nmean(values)\nload(B)\nload(A)\n\nvalues <- c(2, 4, 7, 5, 9, NA)\nB:mean(values)\n\n#result will be `NA`\n"},{"path":"functions.html","id":"aliases","chapter":"7 Functions","heading":"7.3.3 Aliases","text":"may encounter concept “alias” library. common Python, users can set alias library name, use going forward rather writing full library name. mostly come looking help online, wondering seeing abbreviations.example, Python uses import term load library (“package” Python calls ) allows setting alias using import package alias syntax. convention, many Python users use standard aliases common packages, :Functions can called using explicit package:function syntax, pd.DataFrame designate pandas DataFrame object.","code":"import pandas as pd\nimport numpy as np"},{"path":"functions.html","id":"activity-reprise-for-functions","chapter":"7 Functions","heading":"7.4 Activity reprise for functions","text":"Let’s return Chapter 2 activity created algorithm make popcorn.Call back popcorn - function make_popcorn - ? arguments - kernels bag, time?\nmake_popcorn(type = kernels, time = 15 minutes, butter = TRUE, salt = TRUE) vs make_popcorn() defaults\nimport cookbook; cookbook.make_popcorn()\n### stephanie import make_popcorn()\n### kat import make_popcorn()Libraries, packages, modules\nExample: min (R), max (Python), mean (SQL), regression (R, Python, Stata)\nCan look documentation, specify arguments function syntax, well defaults arguments","code":""},{"path":"comments-and-names.html","id":"comments-and-names","chapter":"8 Comments and Names","heading":"8 Comments and Names","text":"Concept comments, naming variables variables\nBriefly touch common conventions (like df dataframe); ask disciplinary conventions abbreviations naming[SL: kind moved ‘caveats’ functions, flagged discuss]","code":""},{"path":"common-issues.html","id":"common-issues","chapter":"9 Common Issues","heading":"9 Common Issues","text":"common issues","code":""},{"path":"common-issues.html","id":"difference-between-and","chapter":"9 Common Issues","heading":"9.1 Difference between = and ==","text":"former, = used set something equal x = 5 \nvariable x equal , value , 5. Conversely, \ndouble equal == used test equality. instance, set\nvariable x equal value 5, code x == 5 return True\ncode x == 6 return False.","code":""},{"path":"common-issues.html","id":"spelling-and-capitalization-matter","chapter":"9 Common Issues","heading":"9.2 Spelling and capitalization matter","text":"variable x different variable X. Likewise, \nfunction mean() function Mean() separate functions.","code":""},{"path":"common-issues.html","id":"special-characters-and-words","chapter":"9 Common Issues","heading":"9.3 Special characters and words","text":"Many programming languages reserve specific words specific tasks.\nexample, function called sum() fairly common across\nlanguages. make alternate function called\nsum(), may lead unexpected results using sum()\nfunctionSimilarly, best practice avoid naming variables objects \ncommon function names. , write code like\nsum = sum(), get confusing , may lead \nunexpected results code behavior downstream.true certain characters. Many programming languages\ntreat NA special class missing value. \n\"NA\", instead character string containing \nletters NA.","code":""},{"path":"common-issues.html","id":"ending-a-code-chunk","chapter":"9 Common Issues","heading":"9.4 Ending a code chunk","text":"Ending statement (needing ; conclusion)","code":""},{"path":"common-issues.html","id":"order-of-operations-1","chapter":"9 Common Issues","heading":"9.5 Order of operations","text":"overwriting/ variable whatever recently set ","code":""},{"path":"common-issues.html","id":"others-work-in-progress","chapter":"9 Common Issues","heading":"9.6 Others [work in progress]","text":"Closing quotes parenthese\nDirect comparison multiple syntax, like task R,\nPython, C, SQL, Stata, Java  don’t need memorize specifics!\nReading writing data / files\nSyntax going specific language, package within \nlanguage\nShow examples reading/writing data R, Python, Stata, SQL","code":""},{"path":"practice-annotating-and-understanding-unfamiliar-code.html","id":"practice-annotating-and-understanding-unfamiliar-code","chapter":"10 Practice annotating and understanding unfamiliar code","heading":"10 Practice annotating and understanding unfamiliar code","text":"","code":""},{"path":"practice-annotating-and-understanding-unfamiliar-code.html","id":"nested-for-loops-and-if-else-statements-in-python","chapter":"10 Practice annotating and understanding unfamiliar code","heading":"10.1 Nested for loops and if else statements (in Python)","text":"example code scraping content set website pages saving content locally. uses ‘nested’ loops, meaning second loop occurs within first loops. also uses nested else statements.SL: can simplify example, maybe remove session_id save_locFor code, can identify loop else statement ends? put another way, can figure lines (numbered code chunk ) statement starts stops?","code":"1.  base_url = \"https://nces.ed.gov/ipeds/datacenter/\"\n2.  data_url = \"DataFiles.aspx?\"\n3.  year_base = \"year=\"\n4.  years = [\"1995\", \"1996\", \"1997\", \"1998\"]\n5.  session_id = \"&sid=4f8f293f-df75-42cd-9cc0-ed184270cf17&rtid=7\"  #you might need to change this\n6. \n7.  # what type of files do you want to save?\n8.  file_type = [\"zip\",\"csv\"]\n9. \n10. # where do you want to save locally?\n11. \n12. # save_loc is redundant, but a reminder that you should have locally folders that reflect the years, 13. because that's where below is saving to\n14. save_loc = years \n15. \n16. # what kind of prefix do you want on your files\n17. save_prefix = \"ipeds_\" \n18. \n19. # scrape\n20. for year in years:\n21.     url = base_url+data_url+year_base+year+session_id \n22.     webpage = requests.get(url)\n23.     soup = BeautifulSoup(webpage.content, 'html.parser')\n24. \n25. \n26.     if os.path.isdir(\"./\"+year):\n27.         # notice output path has \"year\" as a variable indicating folders\n28.         output_path = \"./\"+year+\"/\"+save_prefix+year+\"_\"+\".html\"\n29.     \n30.         if os.path.exists(output_path):\n31.             print(output_path+\" already exists. Did NOT save.\")\n32.         else:\n33.             # saving the html file\n34.             print(\"saving \"+output_path)\n35.     \n36.             with open(output_path, 'wb') as file:\n37.                 file.write(webpage.content) \n38.             \n39.         # saving files linked on original html page which meet file type requirement\n40.         for link in soup.find_all('a')[0:16]:  \n41.             data_target = link.get('href')\n42.             # data_target[-3:]\n43.             if any(extension == data_target[-3:] for extension in file_type):\n44.                 wget_url = base_url+data_target\n45.                 wget_save = \"./\"+year+\"/\"+save_prefix+data_target.replace(\"/\",\"-\")\n46.     \n47.                 if os.path.exists(wget_save):\n48.                     print(wget_save+\" already exists. Did NOT save.\")\n49.                 else:\n50.                     print(\"SAVING \"+ wget_url+ \" at local location: \"+wget_save)\n51.                     wget.download(wget_url,wget_save)\n52.                     time.sleep(.25) # be kind, don't look like a DDOS attack\n53.     else:\n54.         print(\"\\n!!! save directory \"+year+\" does NOT exist. please create\\n\")\n55.     \n56.     \n57. print(\"fin.\")\n"},{"path":"practice-annotating-and-understanding-unfamiliar-code.html","id":"new-types-of-conditions-in-sql","chapter":"10 Practice annotating and understanding unfamiliar code","heading":"10.2 New types of conditions (in SQL)","text":"Consider following SQL command:preferred approach navigating understanding unfamiliar code may vary.One option break code component parts. can separate functions (common tasks across programming languages) data-specific variables names. Can identify:OceanBuoys term likely refer ?think SELECT function ?* indicate, combination SELECT?Parsing second line starts , can make educated guess Country BuoyName refer ?Can guess (feel free use Google) LIKE 'S%' LIKE 'K%' indicate?OceanBuoys term refers table dataframe.SELECT function selects columns table.* indicates want return columns table.OceanBuoys table must columns named Country BuoyName.LIKE used pattern matching. code matching values start “S” “K”.Now, can write narrative see code trying ?Starting OceanBuoys table, return columns rows Country equal “Spain” BuoyName value starts “S” “K”.","code":"SELECT * FROM OceanBuoys\nWHERE Ocean = 'Atlantic' AND (BuoyName LIKE 'S%' OR BuoyName LIKE 'K%');\n"},{"path":"practice-annotating-and-understanding-unfamiliar-code.html","id":"add-example-for-cc","chapter":"10 Practice annotating and understanding unfamiliar code","heading":"10.3 add example for C/C++","text":"","code":""},{"path":"practice-annotating-and-understanding-unfamiliar-code.html","id":"challenge-practice-new-syntax-and-terms-in-r","chapter":"10 Practice annotating and understanding unfamiliar code","heading":"10.4 Challenge practice: new syntax and terms (in R)","text":"logic underlying programming languages stays consistent, central challenge different languages often special syntax, can take get used . don’t panic! Familiarity comes experience meantime, Google friend.code example , note new symbol %>% %% new functions mutate() paste(). select() function least familiar example , ifelse else statement.Task: go line line annotate, words, line code .line new take logic ’ve covered prior sections; breakdown new terms , guide annotation.Line 1\ndf_new <- df ?\n%>% symbol indicate?\ndf_new <- df ?%>% symbol indicate?Line 2\nselect() function likely ?\nmight mean argument function preceded -?\nselect() function likely ?might mean argument function preceded -?Line 3\nUsing context clues (Google) think mutate() function ?\nnew paste() function three arguments (paste(arg1, arg2, arg3)). think arguments ?\nUsing context clues (Google) think mutate() function ?new paste() function three arguments (paste(arg1, arg2, arg3)). think arguments ?Line 4\nifelse() statement different format ’ve covered far, concept . Assuming ifelse() statement three arguments (ifelse(condition, mystery1, mystery2)) might two mystery arguments specifying?\nLooking section survey_wave %% c(\"first\", \"second\"), think translate , written explanation task ?\nifelse() statement different format ’ve covered far, concept . Assuming ifelse() statement three arguments (ifelse(condition, mystery1, mystery2)) might two mystery arguments specifying?Looking section survey_wave %% c(\"first\", \"second\"), think translate , written explanation task ?Finally, always important understand data type structure data acted upon. Keep mind, based questions , structure data used ?Starting table/dataframe called “df”, want keep (select) columns except column named “respondent_name”., make new column called “identifier”. new column created pasting together value “respondent_id” column “survey_wave” column, separated underscore., make another new column called “survey_type”. values column determined ifelse statement: value “survey_wave” column values specified list (\"first\", \"second\") (value “first” “second”), value “survey_type” column “phone”. Otherwise, value “person”.","code":"1.  df_new <- df %>% \n2.    select(-respondent_name) %>% \n3.    mutate(identifier = paste(respondent_id, survey_wave, sep = \"_\")) %>% \n4.    mutate(survey_type = ifelse(survey_wave %in% c(\"first\", \"second\"), \"phone\", \"in person\"))\n  "},{"path":"recap-and-consultation-tips.html","id":"recap-and-consultation-tips","chapter":"11 Recap and Consultation Tips","heading":"11 Recap and Consultation Tips","text":"Recap - won’t expert, idea build skillset","code":""},{"path":"recap-and-consultation-tips.html","id":"approaching-consultations","chapter":"11 Recap and Consultation Tips","heading":"11.1 Approaching Consultations","text":"may approach consultations - prepare advance knowing specific question, evening seeing code advance; student talk code\nclear can .\nHelping programming vs statistics (ask help interpreting something Full disclosure, statistician)\nTroubleshooting vs consult\nOk say don’t know! Point documentation learning resources","code":""},{"path":"recap-and-consultation-tips.html","id":"three-areas-for-errors","chapter":"11 Recap and Consultation Tips","heading":"11.2 Three Areas For Errors","text":"Code running → often syntax errorRunning unexpectedly / unexpected outputinputlogicoutput","code":""},{"path":"bd-demo-intro.html","id":"bd-demo-intro","chapter":"12 BD Demo Introduction","heading":"12 BD Demo Introduction","text":"Bookdown reference: https://bookdown.org/yihui/bookdown/usage.htmlYou can label chapter section titles using {#label} , e.g., can reference Chapter 2. manually label , automatic labels anyway, e.g., Chapter 13.Figures tables captions placed figure table environments, respectively.\nFigure 12.1: nice figure!\nReference figure code chunk label fig: prefix, e.g., see Figure 12.1. Similarly, can reference tables generated knitr::kable(), e.g., see Table 12.1.Table 12.1: nice table!can write citations, . example, using bookdown package (Xie 2025) sample book, built top R Markdown knitr (Xie 2015).","code":"\npar(mar = c(4, 4, .1, .1))\nplot(pressure, type = 'b', pch = 19)\nknitr::kable(\n  head(iris, 20), caption = 'Here is a nice table!',\n  booktabs = TRUE\n)"},{"path":"bd-demo-intro.html","id":"keeping-this-below-for-easy-reference-while-we-get-used-to-the-bookdown-format","chapter":"12 BD Demo Introduction","heading":"12.1 Keeping this below for easy reference while we get used to the bookdown format","text":"PrerequisitesThis sample book written Markdown. can use anything Pandoc’s Markdown supports, e.g., math equation \\(^2 + b^2 = c^2\\).bookdown package can installed CRAN Github:Remember Rmd file contains one one chapter, chapter defined first-level heading #.compile example PDF, need XeLaTeX. recommended install TinyTeX (includes XeLaTeX): https://yihui.org/tinytex/.","code":"\ninstall.packages(\"bookdown\")\n# or the development version\n# devtools::install_github(\"rstudio/bookdown\")"},{"path":"bd-demo-methods.html","id":"bd-demo-methods","chapter":"13 BD Demo Methods","heading":"13 BD Demo Methods","text":"describe methods chapter.Math can added body using usual syntax like ","code":""},{"path":"bd-demo-methods.html","id":"math-example","chapter":"13 BD Demo Methods","heading":"13.1 math example","text":"\\(p\\) unknown expected around 1/3. Standard error approximated\\[\nSE = \\sqrt{\\frac{p(1-p)}{n}} \\approx \\sqrt{\\frac{1/3 (1 - 1/3)} {300}} = 0.027\n\\]can also use math footnotes like this1.approximate standard error 0.0272","code":""},{"path":"references.html","id":"references","chapter":"References","heading":"References","text":"references must file order preceding file order render","code":""}]
