[{"path":"index.html","id":"about","chapter":"1 About","heading":"1 About","text":"Bookdown reference: https://bookdown.org/yihui/bookdown/usage.htmlBEGIN pitch()ever wondered colleagues can look computer programming script, little prior knowledge language, read , help fix code? ’s know programming languages, programming languages use concepts logic.STRUCTURE(workshop)interactive workshop, attendees gain hands-experience understand interpret programming logic. cover fundamental topics programming including: conditional statements, loops, order operations logical flow, functions arguments, data types. Attendees practice formulating programming arguments accomplish common tasks, subsetting data based set conditions.prior_experience == FALSENo coding experience required! Programming logic transferable across specific languages, learners focus concepts, rather specific syntax specific language. Attendees learn interpret programming logic build confidence apply understanding various programming languages may encounter.(x example1:example5) {annotate(x)}provide real world examples programming logic practice, workshop integrate hands-work time examples sample code written R, Python, SQL, Stata, languages. Attendees practice annotating code human understandable language discuss process, pitfalls, peers instructors.attendee_need == “learn_programming_logic”: print(“register workshop!”)","code":""},{"path":"index.html","id":"keeping-this-below-for-easy-reference-while-we-get-used-to-the-bookdown-format","chapter":"1 About","heading":"1.1 Keeping this below for easy reference while we get used to the bookdown format","text":"PrerequisitesThis sample book written Markdown. can use anything Pandoc’s Markdown supports, e.g., math equation \\(^2 + b^2 = c^2\\).bookdown package can installed CRAN Github:Remember Rmd file contains one one chapter, chapter defined first-level heading #.compile example PDF, need XeLaTeX. recommended install TinyTeX (includes XeLaTeX): https://yihui.org/tinytex/.","code":"\ninstall.packages(\"bookdown\")\n# or the development version\n# devtools::install_github(\"rstudio/bookdown\")"},{"path":"intro.html","id":"intro","chapter":"2 Introduction","heading":"2 Introduction","text":"New intro Programming Logic","code":""},{"path":"intro.html","id":"building-a-mental-model","chapter":"2 Introduction","heading":"2.1 Building a Mental Model","text":"","code":""},{"path":"intro.html","id":"a-note-on-syntax","chapter":"2 Introduction","heading":"2.2 A Note on Syntax","text":"","code":""},{"path":"algorithms.html","id":"algorithms","chapter":"3 Algorithms","heading":"3 Algorithms","text":"overview algorithms computer code/scripting","code":""},{"path":"algorithms.html","id":"breakout-activity","chapter":"3 Algorithms","heading":"3.1 Breakout Activity","text":"activity, write algorithm make popcorn. Sounds simple, right? “Make popcorn” something people least general understanding . scenario, ’re providing step--step directions computer understand make popcorn computer need told every action take, order successfully make popcorn.task write step needed make popcorn.write steps group, consider:opening container point?making microwave popcorn, using stove?much time needed make popcorn?computer popcorn starts burning?","code":""},{"path":"loops.html","id":"loops","chapter":"4 Loops","heading":"4 Loops","text":"Drawing Introduction Programming Logic(Lynne O’Hanlon 2000)\nStart loop first function term\n“Populate array loop” early example; pg 376 blank table good early exercise.\nSide note infinite loop, importance settling bounds\nhappens don’t tell loop increase?\nExamples loops multiple languages (Python, C, R)?\ndecide: theory practice, theory/practice/theory/practice?\nAlso writing result iteration otherwise ’ll get last result (common problem)","code":""},{"path":"loops.html","id":"exercise---loop-trace","chapter":"4 Loops","heading":"4.1 Exercise - loop trace","text":"Grab pen paper write output iteration loop:","code":"for (x in 0:5) \n  print(x)"},{"path":"loops.html","id":"exercise---populate-an-array","chapter":"4 Loops","heading":"4.2 Exercise - populate an array","text":"Let’s use loop populate array.’ll start empty array called table 4 rows columns named , B, C, D, E:loop:[adapt programming logic book exercise loop]Grab pen paper (spreadsheet program like Google Sheets Excel) manually fill empty cells array.number cell A1?number cell B2?number cell D4?","code":""},{"path":"loops.html","id":"other-types-of-loops","chapter":"4 Loops","heading":"4.3 Other Types of Loops","text":"(check beginning)-(check end)(check end)","code":""},{"path":"loops.html","id":"caveats","chapter":"4 Loops","heading":"4.4 Caveats","text":"","code":""},{"path":"loops.html","id":"infinite-loops","chapter":"4 Loops","heading":"4.4.1 Infinite loops","text":"","code":""},{"path":"loops.html","id":"overwriting-outputs","chapter":"4 Loops","heading":"4.4.2 Overwriting outputs","text":"","code":""},{"path":"conditionals-and-making-choices.html","id":"conditionals-and-making-choices","chapter":"5 Conditionals and Making Choices","heading":"5 Conditionals and Making Choices","text":"Many times programming, want take certain action certain condition satisfied., can use conditional statements. commonly used format conditional statement programming statement, often combined else statement.structure tells program check condition next step depends whether condition true, false. can think narrative statement: “condition true, action X. condition true, action Y.”programming format, narrative statement look like:Note else used equivalent “true”, meaning == FALSE.limited single TRUE/FALSE check else statement, actions limited “x true, y scenarios”.else (written elif programming languages) concept allows us add another sequential check statement true. updated narrative statement might : “condition true, action X. condition B true, action Z. neither condition condition B true, action Y.”programming format, updated narrative statement look like:","code":"IF conditionA == TRUE, do X\nELSE do Y\nIF conditionA == TRUE, do X\nELSE IF conditionB == TRUE, do Z\nELSE do Y\n"},{"path":"conditionals-and-making-choices.html","id":"boolean-operators","chapter":"5 Conditionals and Making Choices","heading":"5.1 Boolean Operators","text":"programming, things boil true false. (Sometimes may see true/false capitalized TRUE FALSE, concept .)Programming uses Boolean operators :(may also see & used)(may also see | used)(may also see ! indicate negation, instance != “equal”)equals (also ==)\n[SL note: Boolean operator lists include , , - include EQUALS keep separate part testing true/false?]\n[SL note: Boolean operator lists include , , - include EQUALS keep separate part testing true/false?]","code":""},{"path":"conditionals-and-making-choices.html","id":"exercise---ifelse-trace","chapter":"5 Conditionals and Making Choices","heading":"5.2 Exercise - ifelse trace","text":"Let’s look examples conditional statements practice.first trace, set values x y :printed output ifelse section?reset x y :","code":"if x == y:\n  print(\"values are equal\")\nelse if x > y:\n  print(\"x greater than y\")\nelse:\n  print(\"x must be less than y\")\n  x <- 37\ny <- 42\nx <- 75\ny <- 9\n"},{"path":"conditionals-and-making-choices.html","id":"caveats-1","chapter":"5 Conditionals and Making Choices","heading":"5.3 Caveats","text":"","code":""},{"path":"conditionals-and-making-choices.html","id":"order-of-operations","chapter":"5 Conditionals and Making Choices","heading":"5.3.1 Order of operations","text":"Order operations critical conditionals. computer go condition order, early condition satisfied, statement conclude check conditions.","code":""},{"path":"conditionals-and-making-choices.html","id":"matching-parentheses","chapter":"5 Conditionals and Making Choices","heading":"5.3.2 Matching parentheses","text":"complex nested conditionals, sure use parentheses, sure parentheses matched properly.","code":""},{"path":"conditionals-and-making-choices.html","id":"formatting-may-vary","chapter":"5 Conditionals and Making Choices","heading":"5.3.3 Formatting may vary","text":"Programming languages may specific formatting conditional statements. may mean certain brackets must used, new lines required sections, tab indents needed.example, Python expects : end section ifelse statement, uses elif else , requires indentation indicate action section:contract, R makes use curly brackets {} indicate section ifelse statement indentation convention readability, technically required code run:[Note self: add another 1 2 language examples show similarities differences formatting]","code":"if x == y:\n  print(\"values are equal\")\nelif x > y:\n  print(\"x greater than y\")\nelse:\n  print(\"x must be less than y\")\nif (x == y) {\n  print(\"values are equal\")\n} else if (x > y) {\n  print(\"x greater than y\")\n} else {\n  print(\"x must be less than y\")\n}\n"},{"path":"functions.html","id":"functions","chapter":"6 Functions","heading":"6 Functions","text":"“function” programming piece code specific task.Consider example calculating mean set values. one hand, write code manually add value divide number values.\nhand, plan take mean set values often, easier function task without needing manually write every time.","code":"values = (2, 4, 7, 5, 9)\n\nmean_value = (2 + 4 + 7 + 5 + 9) / 5[SL:insert pseucode to calculate mean without using sum() or len(), use a for loop maybe to call back? although I keep coming back to using len() at least...]\n"},{"path":"functions.html","id":"arguments","chapter":"6 Functions","heading":"6.1 Arguments","text":"function, “arguments” inputs can specify. mean() function, primary argument kind input put : mean(x) x list vector values. Another argument might option handle missing NA values: mean(x, na.rm = FALSE) default value na.rm FALSE, indicating NA values removed calculation. Optional arguments like may come pre-supplied default, case na.rm = FALSE NAvalues retained, unless argument manually changed TRUE.important understand () arguments function (b) arguments optional defaults . function run long non-optional arguments completed (, input specified), resulting output may match expectations unless understand optional arguments included, default values .example, let’s return mean() function arguments input (mandatory) handling NA values (optional).input mandatory argument specifying input:output function NA, retain NA values - default mean() function, mean necessary NA. computer, sum set values plus NA always NA, taking mean NA also return NA.Conversely, specify want remove NA values mean calculation:Now output 5.4 mean values exlucding NA.","code":"values <- c(2, 4, 7, 5, 9, NA)\nmean(values)\nvalues <- c(2, 4, 7, 5, 9, NA)\nmean(values, na.rm = TRUE)\n"},{"path":"functions.html","id":"libraries","chapter":"6 Functions","heading":"6.2 Libraries","text":"Programming languages variety functions common tasks ready use without additional work. called “built ” functions available use right away.However, built functions often limited basic tasks include complex custom functions may use. Now, can code complex functions , building built functions, take lot time require -depth programming knowledge.good news programming languages optional “libraries” (packages, modules, depending term programming language choice uses) include additional functions, beyond built function. creating new function scratch, worthwhile check whether library exists includes function want .can think programming libraries serving role similar actual libraries. instance, don’t need memorize every historical event, write favorite novel scratch - can check book library read learn !way, computer programming language choice doesn’t need always every single function hand, take lot space. Instead, can “check ” (load) “book” (collection functions) created another person. can use additional functions way function.set saves computer disk space, ensures don’t recreate wheel make every function scratch, provides level standardization (e.g., everyone uses reference “book” output input, across users).good rule thumb seems like function want broadly useful, someone likely created library containing . also true niche domain-specific functions: task one comes lot analysis, likely library functions analysis tasks.Finding ‘right’ library function need can overwhelming, good starting point official library collection programming language, CRAN R PyPI Python.","code":""},{"path":"functions.html","id":"accessing-functions-in-libraries","chapter":"6 Functions","heading":"6.3 Accessing functions in libraries","text":"syntax accessing functions libraries varies programming language follows general process :Install library source. need .Load import library. need every time want access function library. convention, libraries loaded top script, , people, can see glance libraries needed run script.Use functions normal.","code":""},{"path":"functions.html","id":"caveats-2","chapter":"6 Functions","heading":"6.3.1 Caveats","text":"","code":""},{"path":"functions.html","id":"function-names","chapter":"6 Functions","heading":"6.3.2 Function names","text":"many function names make sense English language, may functions different libraries name. programming language know function trying access? default, language use function recently loaded imported package.Let’s say two mean() functions, one library one library B. differ default settings:library defauls na.rm = TRUElibrary B defaults na.rm = FALSEIf load libraries order B use mean() function, using mean() function library B.result NA.Conversely, load library B library , use mean() function library .value 5.4.tricky part happens invisibly. may may - depending programming language - warning two libraries contain functions name. , keeping track order loading important. get unexpected results, can double check library function using .alternative method explicit function calling. programming languages allow syntax along lines library:function() specify use function stated library.","code":"load(A)\nload(B)\n\nvalues <- c(2, 4, 7, 5, 9, NA)\nmean(values)\nload(B)\nload(A)\n\nvalues <- c(2, 4, 7, 5, 9, NA)\nmean(values)\nload(B)\nload(A)\n\nvalues <- c(2, 4, 7, 5, 9, NA)\nB:mean(values)\n\n#result will be `NA`\n"},{"path":"functions.html","id":"aliases","chapter":"6 Functions","heading":"6.3.3 Aliases","text":"may encounter concept “alias” library. common Python, users can set alias library name, use going forward rather writing full library name. mostly come looking help online, wondering seeing abbreviations.example, Python uses import term load library (“package” Python calls ) allows setting alias using import package alias syntax. convention, many Python users use standard aliases common packages, :Functions can called using explicit package:function syntax, pd.DataFrame designate pandas DataFrame object.","code":"import pandas as pd\nimport numpy as np"},{"path":"functions.html","id":"activity-reprise-for-functions","chapter":"6 Functions","heading":"6.4 Activity reprise for functions","text":"Let’s return Chapter 2 activity created algorithm make popcorn.Call back popcorn - function make_popcorn - ? arguments - kernels bag, time?\nmake_popcorn(type = kernels, time = 15 minutes, butter = TRUE, salt = TRUE) vs make_popcorn() defaults\nimport cookbook; cookbook.make_popcorn()\n### stephanie import make_popcorn()\n### kat import make_popcorn()Libraries, packages, modules\nExample: min (R), max (Python), mean (SQL), regression (R, Python, Stata)\nCan look documentation, specify arguments function syntax, well defaults arguments","code":""},{"path":"comments-and-names.html","id":"comments-and-names","chapter":"7 Comments and Names","heading":"7 Comments and Names","text":"Concept comments, naming variables variables\nBriefly touch common conventions (like df dataframe); ask disciplinary conventions abbreviations naming[SL: kind moved ‘caveats’ functions, flagged discuss]","code":""},{"path":"common-issues.html","id":"common-issues","chapter":"8 Common Issues","heading":"8 Common Issues","text":"common issues\n= vs == (set equal vs test equality)\nClosing quotes parentheses\nOverwriting variable names\nOrder running code matters; variable whatever recently set \nSpelling capitalization matters\n‘X’ different ‘x’\nEnding statement (needing ; conclusion)\nDirect comparison multiple syntax, like task R, Python, C, SQL, Stata, Java\ndon’t need memorize specifics!\nReading writing data / files\nSyntax going specific language, package within language\nMissing values may special class, different languages\nShow examples reading/writing data R, Python, Stata, SQL","code":""},{"path":"recap-and-consultation-tips.html","id":"recap-and-consultation-tips","chapter":"9 Recap and Consultation Tips","heading":"9 Recap and Consultation Tips","text":"Recap - won’t expert, idea build skillset","code":""},{"path":"recap-and-consultation-tips.html","id":"approaching-consultations","chapter":"9 Recap and Consultation Tips","heading":"9.1 Approaching Consultations","text":"may approach consultations - prepare advance knowing specific question, evening seeing code advance; student talk code\nclear can .\nHelping programming vs statistics (ask help interpreting something Full disclosure, statistician)\nTroubleshooting vs consult\nOk say don’t know! Point documentation learning resources","code":""},{"path":"recap-and-consultation-tips.html","id":"three-areas-for-errors","chapter":"9 Recap and Consultation Tips","heading":"9.2 Three Areas For Errors","text":"Code running → often syntax errorRunning unexpectedly / unexpected outputinputlogicoutput","code":""},{"path":"intro-bd.html","id":"intro-bd","chapter":"10 BD Demo Introduction","heading":"10 BD Demo Introduction","text":"can label chapter section titles using {#label} , e.g., can reference Chapter 2. manually label , automatic labels anyway, e.g., Chapter ??.Figures tables captions placed figure table environments, respectively.\nFigure 10.1: nice figure!\nReference figure code chunk label fig: prefix, e.g., see Figure 10.1. Similarly, can reference tables generated knitr::kable(), e.g., see Table 10.1.Table 10.1: nice table!can write citations, . example, using bookdown package (Xie 2025) sample book, built top R Markdown knitr (Xie 2015).","code":"\npar(mar = c(4, 4, .1, .1))\nplot(pressure, type = 'b', pch = 19)\nknitr::kable(\n  head(iris, 20), caption = 'Here is a nice table!',\n  booktabs = TRUE\n)"},{"path":"bd-demo-methods.html","id":"bd-demo-methods","chapter":"11 BD Demo Methods","heading":"11 BD Demo Methods","text":"describe methods chapter.Math can added body using usual syntax like ","code":""},{"path":"bd-demo-methods.html","id":"math-example","chapter":"11 BD Demo Methods","heading":"11.1 math example","text":"\\(p\\) unknown expected around 1/3. Standard error approximated\\[\nSE = \\sqrt{\\frac{p(1-p)}{n}} \\approx \\sqrt{\\frac{1/3 (1 - 1/3)} {300}} = 0.027\n\\]can also use math footnotes like this1.approximate standard error 0.0272","code":""},{"path":"references.html","id":"references","chapter":"References","heading":"References","text":"references must file order preceding file order render","code":""}]
