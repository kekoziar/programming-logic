[{"path":"index.html","id":"about","chapter":"1 About","heading":"1 About","text":"BEGIN pitch()ever wondered colleagues can look computer programming script, little prior knowledge language, read , help fix code? ’s know programming languages, programming languages use concepts logic.STRUCTURE(workshop)interactive workshop, attendees gain hands-experience understand interpret programming logic. cover fundamental topics programming including: conditional statements, loops, order operations logical flow, functions arguments, data types. Attendees practice formulating programming arguments accomplish common tasks, subsetting data based set conditions.prior_experience == FALSENo coding experience required! Programming logic transferable across specific languages, learners focus concepts, rather specific syntax specific language. Attendees learn interpret programming logic build confidence apply understanding various programming languages may encounter.(x example1:example5) {annotate(x)}provide real world examples programming logic practice, workshop integrate hands-work time examples sample code written R, Python, SQL, Stata, languages. Attendees practice annotating code human understandable language discuss process, pitfalls, peers instructors.attendee_need == “learn_programming_logic”: print(“register workshop!”)","code":""},{"path":"intro.html","id":"intro","chapter":"2 Introduction","heading":"2 Introduction","text":"different type programming workshop. One doesn’t require computer, instead intends help build mental models computer programming works. learn logic behind programming, also methods identifying errors algorithms code computer doesn’t see. technology required, besides ability view lesson, something write piece paper.","code":""},{"path":"intro.html","id":"building-a-mental-model","chapter":"2 Introduction","heading":"2.1 Building a Mental Model","text":"experience computational consultations often student researchers take someone else’s code try adapt research, use code without knowing . means ’re unable easily update script, create errors don’t know address, even import errors already script. Sometimes can’t even adapt use original data different location computer. can’t really read code, reliant computer reading code.purpose workshop isn’t just introduce programming logic, ’s provide safe space practice thinking computer tracing algorithms code snippets instead computer just .","code":""},{"path":"intro.html","id":"a-note-on-syntax","chapter":"2 Introduction","heading":"2.2 A Note on Syntax","text":"Syntax formal structure computer programming language. Assembly, C/C++, C#, Python, R formal language structures computer knows read code. , sometimes syntax gets way learning concepts. Luckily, programming concepts across languages.syntax use examples something called psuedocode. Pseudocode focuses concepts tasks, syntax. don’t need worry semicolon parenthesis place write psuedocode, ’ll still know interpret written.also introduce programming examples different languages, can start recognize similarities differences languages. won’t expert end workshop, help build skillset hopefully ’re comfortable reading known (unknown) computer languages.","code":""},{"path":"algorithms.html","id":"algorithms","chapter":"3 Algorithms","heading":"3 Algorithms","text":"","code":""},{"path":"algorithms.html","id":"what-are-algorithms","chapter":"3 Algorithms","heading":"3.1 What Are Algorithms","text":"people heard term algorithm, especially relation AI social media feeds, algorithm?algorithm set instructions something. AI, term algorithm often used term represent overall way whatever AI ’re working trained . social media feeds, algorithm determine platform selects content delivered user. Algorithms can simple complex.common analogy algorithm recipe. recipe includes set ingredients, like variables code, lists instructions ingredients. , big difference common recipes used seeing algorithm exact specific tell computer something. isn’t enough tell computer, “get data.” tell data located, format , read , format want data use script. let’s example recipe make cheesy mashed potatoes.steps easy enough:Take potatoes boil ’re done.Drain.Add butter, milk, salt/pepper taste.Mash.Fold cheese.Eat.us know infer instructions missing. , computers aren’t intelligent like humans. need explicitly told something.many potatoes? boil mean? done mean? (also question asked mom reading grandmother’s recipes.)Computer code needs explicit complete. Let’s see looks like first part algorithm.Algorithm peeling potatoes Cheesy Mashed PotatoesGet three pounds russet potatoes.Get bowl large enough hold three pounds russet potatoes.Get vegetable peeler.Take one potato.Peel potato.Rinse potato water.Place peeled potato bowlRepeat 4-7 potatoes washed peeledWhen start breaking process specific actions, instructions can get quite lengthy! need order “instruct” computer want : splitting large complex overall task simple tasks can done one action time.Essentially, ’s computer processors - one action time. Computers multi-core processors can multiple actions simultaneously, one action core. ’s just computer fast, looks like ’s everything , still executes commands step step.","code":""},{"path":"algorithms.html","id":"breakout-activity","chapter":"3 Algorithms","heading":"3.2 Breakout Activity","text":"Timing: 15 minutes breakout group work, followed 10 minutes full group discussion.activity, group write algorithm make popcorn. “Make popcorn” something people least general understanding (even making cheesy mashed potatoes) remember: scenario, group needs provide step--step directions computer understand make popcorn.write steps group, consider:opening container point?making microwave popcorn, using stove, impact directions?time needed make popcorn consistent, depend factors?something computer popcorn starts burning, “errors” arise?","code":""},{"path":"data-types.html","id":"data-types","chapter":"4 Data types","heading":"4 Data types","text":"","code":""},{"path":"data-types.html","id":"variables","chapter":"4 Data types","heading":"4.1 Variables","text":"Now understand structure logic algorithms, can start natural language algorithms translated programming scripts. order , need introduce closely related concepts variables, data types, data structures (Kat’s note: data structures might early, maybe .)word people use lot referring computer code variable, variable? variable placeholder type data used computer code.ingredients <- cheddar cheese, potatoes, milk, salt, butterWe use variables represent data used within program ’s easy change ,ingredients <- smoked gouda cheese, potatoes, milk, salt, butterand also easy build mental model different variables interrelate.","code":"ingredients <- smoked gouda cheese, potatoes, milk, salt, butter\ningredient_quantities <- all, 3 lb, 0.5 c, to taste, 8 tbsp"},{"path":"data-types.html","id":"pro-tip","chapter":"4 Data types","heading":"4.1.1 Pro-tip","text":"common rule help decide name use variable , name describe data represent. used term x - commonly used variable math equations - wouldn’t know represents. Using word ingredients descriptive, idea data variable - describes variable represents.Something ’d commonly helping researchers code, especially ’d see variable names abbreviations, ’d ask abbreviation something commonly used field. questions usually go something like :know, ’m expert field. ’re expert. Can help understand little ’re trying code?w_f represent?something someone knowledgeable field recognize?’s good practice use self-describing variables someone field recognize. ’s also good idea keep track information data README data dictionary. Honestly, ’ve heard lot different terms describe , ’s basically file describes data. can give example want.Kat’s favorite dataset example: Leaf Dataset UCI Data Science Repository (Silva Maral 2013)top code define variables, variable name doesn’t exactly correlate something dataset’s README file, can add comment exact term.","code":""},{"path":"data-types.html","id":"data-types-1","chapter":"4 Data types","heading":"4.2 Data Types","text":"already stated, variables hold value. (won’t go details happens computer, though ’re interested, tell workshop, separate time.) ’s enough us know whenever see variable, correlates sort data.know can math, define numbers? , commonly, can write spell word, define alphabet word uses? , use recipe analogy, can cook, define (identify) food? Computer programming way. can use data, define data types.three data types ubiquitous across programming languages.first two related numbers:Integers (int) whole numbers: positive, negative, zero.Floats (float) floating point numbers, real numbers, numbers decimals.third related words text.Characters (char) single character, can connected together create string (str), basically text.data types specific particular language special case one three data types (string special case character).","code":""},{"path":"data-types.html","id":"data-structures","chapter":"4 Data types","heading":"4.3 Data Structures","text":"data structure special framework holds data. , lot different types data structures, ’ll describe common ones.single value isn’t strictly data structure, ’s worth mentioning exist.list just , list data elements. nice thing lists can contain multitude different data types, also different data structures.cheeses <- (8, smoked gouda, 0, milk, 16, cheddar, .25, limburger)array common data structure, base single-dimension structure. ’ll commonly see array represented square brackets.may encounter text elements arrayingredients = [cheese, potatoes, milk, salt, butter]array integersquantities <- [16, 32, 8, 0, 4]floatsquantities = [16, 32, 8, 0.125, 4]data cells (elements) array needs type, part makes array different list. array created different data types, many computer languages, R Python, automatically convert data single data type. formally called coercion. Numeric values text coerced text, integers real numbers floats, way around.may also see data structure called vector (different vectors used math physics).matrix multi-dimensional array restrictions array, terms data type used throughout. Honestly, depends ’re talking refer arrays matrices, ’s likely highly dependent type math ’re using research.matrix rows columns. number elements row needs , number elements column.matrix size \\(\\) \\(j\\), means \\(\\) number rows, \\(j\\) number columns. matrix also demonstrates called index basically address particular element matrix.Using index one-dimensional array pretty easy.ingredients <- [cheese, potatoes, milk, salt, butter]value ingredients[1] cheeseif expand matrix\\[\\begin{equation}\ningredients =\n\\begin{bmatrix}\n  potatoes & milk & heavy\\text{ }cream & butter \\\\\n  Cheddar & Gouda & Parmesan &  Muenster \\\\\n  salt & rosemary & thyme & sage\n\\end{bmatrix}\n\\end{equation}\\]value ingredients[2,4] \\(Muenster\\)want share ’ve programming long time, done math, still double-check index ’m referring multidimensional arrays matrices listed correct order.dataframe tabular form rows columns, much like matrix. However, dataframes can contain mixed data types, instance column integers, column strings, another column floats. Dataframes can also column names row names.ingredientsquantitiesimportancesmoked gouda cheeseall5potatoes3 lb1milk0.5 c3saltto taste4butter8 tbsp2","code":""},{"path":"data-types.html","id":"to-make-things-more-confusing-a-note-on-indices","chapter":"4 Data types","heading":"4.3.1 To make things more confusing: A note on indices","text":"fun “feature” programming languages different languages start index different numbers, either 1 0. Python zero-indexed language, meaning index first element array list 0, R normal language, mean, zero-indexed language, meaning index first element array R 1.like pretend extension mathematicians arguments first number, zero one (yes, ’ve seen debates). , think ease memory management computers, something researchers come us consultations questions . right now, ’s just quirk.workshop, use 1 first element array, ’s easier learn logically.","code":""},{"path":"data-types.html","id":"review","chapter":"4 Data types","heading":"4.4 Review","text":"next items review, want type answer, don’t press enter tell . ’ll say, 3, 2, 1, enter press enter say enter.Let’s practice first, type chat Hello World.chat, assign variable value, type data type parentheses.e.g. quantity = 1.5 (float) following array cheese <- [Cheddar, Gouda, Parmesan, Muenster], value cheese[4] following matrix, \\[\\begin{equation}\npotatoes =\n\\begin{bmatrix}\nYukon\\text{ }Gold & Red\\text{ }Gold & Gala \\\\\nYellow\\text{ }Finn & Russet & Fingerling \\\\\nSweet & Kennebec & Red\\text{ }Pontiac \\\\\nYam & German\\text{ }Butterball & Purple\\text{ }Viking \\\\\nCarola & Nicola & Canela\\text{ }Russet\n\\end{bmatrix}\n\\end{equation}\\]value potatoes[3,2]?","code":""},{"path":"loops.html","id":"loops","chapter":"5 Loops","heading":"5 Loops","text":"nice thing terms used control structures programming languages usually self-describing. ’re going talk loops now.Loops common events programming scripts. computer uses listen user-input. ’s also researchers use want apply statistical method several data files, several columns within data table.","code":""},{"path":"loops.html","id":"for-loops","chapter":"5 Loops","heading":"5.1 for loops","text":"loop probably common type loop. executes chunk code certain number times. common structure loops isNow, collection can list text items, cheesy mashed potato ingredients, can also range numbers, like 1 5 (programming speak 1 2 3 4 5) 7 13 (7 8 9 10 11 12 13).Let’s see looks like action using basic list cheesy mashed potatoes ingredients:look real world code, manually go example loops, without computer work us. Practicing trace tasks simple, like writing ingredient collection, help us build skills , comfort , reading complex code.","code":"for variable in a collection\n  do somethingingredients <- cheddar cheese, potatoes, milk, salt, butter\n\nfor ingredient in ingredients\n  write(ingredient)"},{"path":"loops.html","id":"activity-practicing-a-trace","chapter":"5 Loops","heading":"5.1.1 Activity: Practicing a Trace","text":"Timing: 10 minutes\nneed: piece paper writing implementLet’s set trace exercise. example loop :top paper, write ingredients assignment (ingredients <- cheddar cheese, potatoes, milk, salt, butter).line ’re going create headers variables used within loop code block. Starting left, write term loop iteration, ingredient center line, term write right line.paper look something like :ingredients <- cheddar cheese, potatoes, milk, salt, butter  loop iteration ingredient   write(ingredient)                                    paper formatted ’s easy see ’s going variable loop iteration. called trace, often used software development help debug program. also good exercise help build mental muscles read code.next step fill values iteration loop.paper now look something like :ingredients <- cheddar cheese, potatoes, milk, salt, butter   loop iteration ingredient  write(ingredient)     1cheddar cheesecheddar cheese2potatoespotatoes3milkmilk (yes, little redundant)4saltsalt (acknowledge redunancy)5butterbutter (equivalent horizontal ditto marks?) Note: ’s okay didn’t completely fill variable ingredient function write ingredient case . , ’s important check actions happening variables trace.’ve now completed first trace exercise pseudocode example. Congratulations!workshop, ’re focused programming logic underlying code, rather specific syntax, can helpful look “real” code task, build mental model.","code":"ingredients <- cheddar cheese, potatoes, milk, salt, butter\n\nfor ingredient in ingredients\n  write(ingredient)\ningredients <- c(\"cheddar cheese\", \"potatoes\", \"milk\", \"salt\", \"butter\")\nfor(ingredient in ingredients){\n  print(ingredient)\n}## [1] \"cheddar cheese\"\n## [1] \"potatoes\"\n## [1] \"milk\"\n## [1] \"salt\"\n## [1] \"butter\""},{"path":"loops.html","id":"activity---loop-trace","chapter":"5 Loops","heading":"5.1.2 Activity - Loop Trace","text":"Timing: 10 minutes\nneed: piece paper writing implementNow ’ve practiced trace using text, let’s practice using number ranges Remember computer, range written 2 7 represents numbers 2 3 4 5 6 7.loop trace, ’ll write output iteration loop:Like ingredients trace example, ’ll create table headers variables used within loop code block. Starting left, write term loop iteration, write(x) center line, term write(x*2) right line., fill table iteration x 0 5.Range 0 5 0 1 2 3 4 5   loop iteration write(x)  write(x*2)     1002123244365486510 point, ’re probably thinking manual trace bit tedious. ! - good way strengthen mental model loops work, get comfortable thinking chunk code trying .","code":"for x in 0 to 5 \n  write x\n  write x*2"},{"path":"loops.html","id":"exercise---trace-nested-for-loops","chapter":"5 Loops","heading":"5.1.3 Exercise - Trace Nested for Loops","text":"Timing: 15 minutes\nneed: piece paper writing implementSo far, ’ve tackled one loop time. loops flexible can “nested”, embedded within .Let’s look example following matrix, created using two loopsIndexColumn 1Column 2Column 3Row 1246Row 2579Row 381012Row 4111315The pseudocode matrix created follows:creating table help trace code, answer followingWhat variables need traced?ranges used?calculations need keep track ?anything else?variables need traced?\n, j\nmight think need keep track loop iteration, ’s redundant j start one. ’s enough keep track just values.\n, jyou might think need keep track loop iteration, ’s redundant j start one. ’s enough keep track just values.ranges used?\n1 4 1 3\n1 4 1 3What calculations need keep track ?\n(3*(-1))+(j*2)\n(3*(-1))+(j*2)anything else?\nsmall enough matrix, ’s okay make empty one fill \nsmall enough matrix, ’s okay make empty one fill inLabel columns sketch matrix fill variables loop iterates first five lines (won’t fill whole matrix, portion).num_rows = 4 & num_col = 3Range 1 num_rows 1 2 3 4Range 1 num_col 1 2 3   j    (3*(-1))+(j*2)     11(3*(1-1))+(1*2)12(3*(1-1))+(2*2)13(3*(1-1))+(3*2)21(3*(2-1))+(1*2)22(3*(2-1))+(2*2)Indexj = 1j = 2j = 3i = 1246i = 257i = 3i = 4","code":"num_rows = 4\nnum_col = 3\n\nmatrix <- []\n\nfor (i in 1 to num_rows)\n  for (j in 1 to num_col)\n    matrix[i,j] <- (3*(i-1))+(j*2)"},{"path":"loops.html","id":"other-types-of-loops","chapter":"5 Loops","heading":"5.2 Other Types of Loops","text":"types loops addition commonly used loop. loop uses condition computer checks TRUE FALSE start loop determine code chunk inside loop execute.different loop, loop execute predetermined number times, loop execute upon condition met.loop work, need set condition loop, change loop.can write loop loop using variable increment one time loop run. usually isn’t done, want show something ’re already familiar .example, recall initial loop:equivalent loop look like:’s look like RWhen identify variables keep track loop trace, need add one check condition entering loop met.ingredients <- cheddar cheese, potatoes, milk, salt, buttercondition_check = length(ingredients) = 6 loop iteration    ingredients[]    < condition_check                                             Two types loops loop (check end) loop (check end).logic loop condition true, loop run.\nloop, condition needs set loop, changed within loop.loop, ’s slightly different. loop structure like thisThe logic opposite loop. run condition false, exit condition true.aren’t used often, fact IMO ’s better just re-write logic use loop.","code":"while (condition is TRUE)\n  do somethingingredients <- cheddar cheese, potatoes, milk, salt, butter\n\nfor ingredient in ingredients\n  write(ingredient)ingredients <- cheddar cheese, potatoes, milk, salt, butter\n\ni = 1\ncondition_check = length(ingredients) + 1 \nwhile i < condition_check\n  write ingredients[i]\n  i <- i + 1 // change for condition check\ningredients <- c(\"cheddar cheese\", \"potatoes\", \"milk\", \"salt\", \"butter\")\n\ni <- 1\ncondition_check = length(ingredients) + 1\n\nwhile(i < condition_check){\n  print(ingredients[i])\n  i <- i + 1\n}## [1] \"cheddar cheese\"\n## [1] \"potatoes\"\n## [1] \"milk\"\n## [1] \"salt\"\n## [1] \"butter\"do\n  something\nwhile (condition is TRUE)do\n  something\nuntil (condition is TRUE)"},{"path":"loops.html","id":"exercise---while-trace","chapter":"5 Loops","heading":"5.2.1 Exercise - While Trace","text":"Timing: 10 minutes\nneed: piece paper writing implementLet’s practice combined traceI’ll give minutes write trace. ’re done,\ntype largest number traced write statement, don’t press enter give signal.","code":"condition_check <- 5\ni <- 1\nwhile (i < condition_check):\n  for j in 1 to 3:\n    write (i*j)+i"},{"path":"loops.html","id":"caveats","chapter":"5 Loops","heading":"5.3 Caveats","text":"’ve just experienced, loops come set common issues.\nSince loops frequently encountered concept programming, ’ll go common problems.","code":""},{"path":"loops.html","id":"infinite-loops","chapter":"5 Loops","heading":"5.3.1 Infinite loops","text":"just experienced previous exercise called infinite loop. Infinite loops happen condition check never false. case\nloop, check variable never incremented, loop go process programmer interrupts , computer fails, time ends (whichever comes first).","code":""},{"path":"loops.html","id":"overwriting-outputs","chapter":"5 Loops","heading":"5.3.2 Overwriting outputs","text":"Often researchers developing script, use test case develop algorithm work bugs. way, mistakes made, ’s small scale easy correct. development following.Develop code single caseTest casesUse casesIf step missed, can disastrous. can attest. wrote script rename 500 files, hubris awesome coder, forgot test cases using files. forgot change single rename (\"test-case\") something incorporated loop (\"test-case\"+x) loop finished, wondered went 500 one file folder. Luckily, always backup data files, easy mistake remedy (makes good story importance data backup).","code":"for x in files(1 to 500) \n  rename_file(x, \"test-case\")"},{"path":"conditionals-and-making-choices.html","id":"conditionals-and-making-choices","chapter":"6 Conditionals and Making Choices","heading":"6 Conditionals and Making Choices","text":"","code":""},{"path":"conditionals-and-making-choices.html","id":"if-statements","chapter":"6 Conditionals and Making Choices","heading":"6.1 if Statements","text":"Many times programming, want take certain action certain condition satisfied., can use conditional statements. commonly used format conditional statement programming statement, often combined else statement.structure tells computer check condition next step depends whether condition true false.takes basic form :terms cheesy mashed potatoes algorithm, statement might look like thisIn example, ’ve told computer condition true. can also specify condition false.cheesy mashed potatoes algorithm, may want cut cheese cubes hard cheese:generic programming format, complete else statement look like:, else used equivalent “true”, meaning == FALSE.Furthermore, limited single TRUE/FALSE check else statement, actions limited “something true, scenarios something different”. else (written elif programming languages) concept allows us add another sequential check statement true.updated cheesy mashed potato narrative statement hard cheese, want grate , soft cheese want cube , something neither hard soft cheese, don’t put potatoes.generic programming format, updated statement look like:","code":"IF (condition A is TRUE)\n  do somethingingredient <- cheddar cheese\n\nIF (ingredient is (a type of hard cheese))\n  grate(ingredient)ingredient <- cheddar cheese\n\nIF (ingredient is (a type of hard cheese))\n  grate(ingredient)\nELSE\n  cube(ingredient)IF (condition A is TRUE)\n  do something\nELSE \n  do something differentIF (ingredient is (a type of hard cheese))\n  grate(ingredient)\nELSE IF (ingredient is (a type of soft cheese))\n  cube(ingredient)\nELSE\n  don't useIF (condition A is TRUE)\n  do something\nELSE IF (condition B is true)\n  do something different\nELSE \n  do something even more different"},{"path":"conditionals-and-making-choices.html","id":"exercise---popcorn-if-else-pseudocode","chapter":"6 Conditionals and Making Choices","heading":"6.2 Exercise - Popcorn if else pseudocode","text":"Timing: 5 minutesLet’s try similar example popcorn algorithm section 2.Write else statement specifying appliance use case microwave vs stovetop popcorn.\nWrite , else , else statement includes air fry scenario.version may look different, ’s fine! fun pseudocode practicing logic code, rather getting lots details.","code":"IF (popcorn_type is microwave)\n  use microwave\nELSE IF (popcorn_type is stovetop)\n  use stove\nELSE \n  use air fryer"},{"path":"conditionals-and-making-choices.html","id":"comparing-things-and-booleans","chapter":"6 Conditionals and Making Choices","heading":"6.3 Comparing Things and Booleans","text":"programming, things boil true false. (Sometimes may see true/false capitalized TRUE FALSE, concept . ’ll use ways throughout.). TRUE FALSE formally boolean data type. Programming languages use boolean operators comparison operators determine statement TRUE FALSE order make actions.Common Boolean operators :(may also see ampersand, & && used)(may also see pipe symbol, | || used)(may also see ! indicate negation, instance != “equal”)Common comparison operators :> Greater-< Less->= Greater-equal-<= Less-equal-== equal \nnote == different =. == comparison operator, = assignment operator. Another assignment operator may noticed us using <- commonly used R.\npractice, can replace words “equal ” “assigned value ” appropriately.\n= 6 (assigned value 6)\nB <- 8 (B assigned value 8)\nB == 7 (“B equal 7”, statement evaluated true false. case, false)\nnote == different =. == comparison operator, = assignment operator. Another assignment operator may noticed us using <- commonly used R.practice, can replace words “equal ” “assigned value ” appropriately.= 6 (assigned value 6)B <- 8 (B assigned value 8)B == 7 (“B equal 7”, statement evaluated true false. case, false)","code":""},{"path":"conditionals-and-making-choices.html","id":"conditional-statements-in-practice","chapter":"6 Conditionals and Making Choices","heading":"6.4 Conditional Statements in Practice","text":"Let’s look examples conditional statements practice, first using cheesy mashed potatoes example, actual code.First, recipe example:cheese <- parmesan expect statement print Grate cheese. cheese <- brie expect output Cube cheese. cheese <- broccoli expect output use recipe.Sidenote: yes, assumes somewhere specified list hard cheese soft cheeses. pseudocode example, ’re using cheese-based expertise draw conclusions, ’ve covered, never assume computer know cheeses hard soft!","code":"if cheese == hard:\n  print(\"Grate the cheese.\")\nelse if cheese == hard:\n  print(\"Cube the cheese.\")\nelse:\n  print(\"Do not use this in this recipe.\")"},{"path":"conditionals-and-making-choices.html","id":"exercise-ifelse-trace","chapter":"6 Conditionals and Making Choices","heading":"6.4.1 Exercise: ifelse Trace","text":"Timing: 5 minutesFor exercise, want type answer chat, don’t press enter tell . ’ll say, 3, 2, 1, enter press enter say enter.code , printed output?x must less yWhat answer instead set x y :x greater y","code":"x <- 37\ny <- 42\n\nif x == y:\n  print(\"values are equal\")\nelse if x > y:\n  print(\"x greater than y\")\nelse:\n  print(\"x must be less than y\")x <- 75\ny <- 9\n\nif x == y:\n  print(\"values are equal\")\nelse if x > y:\n  print(\"x greater than y\")\nelse:\n  print(\"x must be less than y\")"},{"path":"conditionals-and-making-choices.html","id":"caveats-1","chapter":"6 Conditionals and Making Choices","heading":"6.5 Caveats","text":"’re going cover formal processes syntax. won’t impact working pseudocode, important know working computer.","code":""},{"path":"conditionals-and-making-choices.html","id":"order-of-operations-in-conditionals","chapter":"6 Conditionals and Making Choices","heading":"6.5.1 Order of operations in conditionals","text":"Order operations critical conditionals. computer go condition order, early condition found true, statement conclude check conditions.case, cheddar == cheese true, computer doesn’t bother checking two statements.","code":"if (cheddar == cheese) OR (brie == cheese) OR (broccoli == cheese):\n  print(\"This is cheesy\")"},{"path":"conditionals-and-making-choices.html","id":"clarity-and-order-of-operations-in-math-statements","chapter":"6 Conditionals and Making Choices","heading":"6.5.2 Clarity and Order of Operations in math statements","text":"us know standard order operation math problem (PEMDAS), computer languages , .3 + 10 * 2 solved 23 (26)don’t need parentheses, good practice use parentheses make code readable clear.3 + (10 * 2) preferred 3 + 10 * 2just (cheddar == cheese) (brie == cheese) (broccoli == cheese)easier read thancheddar == cheese brie == cheese broccoli == cheese","code":""},{"path":"conditionals-and-making-choices.html","id":"matching-parentheses","chapter":"6 Conditionals and Making Choices","heading":"6.5.3 Matching parentheses","text":"complex nested conditionals, sure use parentheses, sure parentheses matched properly.code , without closing parentheses “equal”, continue expect input.far programming language concerned, haven’t finished statement. , depending language, might wait run “completed thought”, speak, provided syntax (end paren )) indicating statement complete program ready run.’s another example fun parentheses:case, extra closing parentheses ) print(\"values equal\") doesn’t matching ( anywhere statement. resulting error look like:","code":"if (x == y) \n  print(\"values are equal\"if (x == y) \n  print(\"values are equal\"))Error: unexpected ')' in:\n\"if (x == y) {\n    print(\"values are equal\"))\""},{"path":"conditionals-and-making-choices.html","id":"language-examples-formatting-may-vary","chapter":"6 Conditionals and Making Choices","heading":"6.6 Language examples: Formatting may vary","text":"Programming languages may specific formatting conditional statements. may mean certain brackets must used, new lines required sections, tab indents needed.Python requires indentation code blocks. Code blocks different structures must aligned indentation.Programming structures, , else, elif, expects : end statement subsequent code block intented oneThe next language examples require indentation code blocks; however, indentation used ’s easier humans read!R makes use curly brackets {} indicate section else statement.following example C/C++ syntax. One big difference C/C++ Python R C/C++ compiled programming language, must first compiled file (often *.exe, can anything) contains machine-language instructions executed.C/C++ syntax looks lot like R, requires semicolons end line executed code block, R require semicolon (although R also run semicolons).PHP similar C/C++, used web development.Bash, need careful spaces around operators parentheses. (cheatsheets https://ss64.com/bash/.html https://devhints.io/bash#conditionals)Bash script example compares numbersThis Bash script example compares text","code":"if x == y:\n  print(\"values are equal\")\nelif x > y:\n  print(\"x greater than y\")\nelse:\n  print(\"x must be less than y\")\nif (x == y) {\n  print(\"values are equal\")\n} else if (x > y) {\n  print(\"x greater than y\")\n} else {\n  print(\"x must be less than y\")\n}if (x == y) {\n  cout << \"values are equal\";\n} else if (x > y) {\n  cout << \"x greater than y\";\n} else {\n  cout << \"x must be less than y\";\n}if (x == y) {\n  echo \"values are equal\";\n} elseif (x > y) {\n  echo \"x greater than y\";\n} else {\n  echo \"x must be less than y\";\n}if (( $x == $y )) ; then\n  echo \"values are equal\"\nelif (( $x > $y )) ; then\n  echo \"x greater than y\"\nelse\n  echo \"x must be less than y\"\nfiif  [[ \"$x\" == \"$y\" ]] ; then\n  echo \"the text in x is the same as y\"\nelse\n  echo \"the text in x is not the same as y\"\nfi"},{"path":"conditionals-and-making-choices.html","id":"challenge","chapter":"6 Conditionals and Making Choices","heading":"6.6.1 Challenge","text":"differences can spot different languages?similarities?","code":""},{"path":"functions.html","id":"functions","chapter":"7 Functions","heading":"7 Functions","text":"","code":""},{"path":"functions.html","id":"what-is-a-function","chapter":"7 Functions","heading":"7.1 What is a function?","text":"“function” programming piece code specific task, packages can called single line code. Functions can predefined developers, also may custom script.’ve already using examples functions psuedocode - include write statement - formal functions, print, cout, echo statements saw conditional examples end previous chapter.print function something simple, provide output, either R Python console interface, people can read. simple use, internal code creates print function little complex (say least). Since communicating output ubiquitous computer languages, language sort print function built function makes easier programmers focus particular code.Functions can something simple complex. essence, functions used know ’re going task .Take cheesy mashed potatoes example. simple function might something like peel_potato(), take first example algorithm peeling potatoes, create function.original algorithm\nAlgorithm peeling potatoes Cheesy Mashed PotatoesGet three pounds russet potatoes.Get bowl large enough hold three pounds russet potatoes.Get vegetable peeler.Take one potato.Peel potato.Rinse potato water.Place peeled potato bowlRepeat 4-7 potatoes washed peeledBut, don’t want create function whole thing. want create function allows us easily execute needs repeated, Steps 4-7. function might look likeA bonus functions, can make generic know action can applied many objects. Perhaps want peel potatoes carrots, can make function .Now peel_vegetable function can used multiple objects - well, , using variable argument potato confusing applied something else.Now ’ve created function peeling vegetables, algorithm might look like ","code":"define function peel_potato(potato, peeler):\n\n  while(potato has skin):\n    location <- on potato, locate skin\n    potato <- at location on potato, with peeler remove strip of skin\n    potato <- rotate potato\n  // end-while (this is a comment, it begins with // )\n  \n  potato <- rinse potato with water\n  \n  return (potato)\n// end function definitiondefine function peel_vegetable(vegetable, peeler):\n\n  while(vegetable has skin):\n    location <- on vegetable, locate skin\n    vegetable <- at location on vegetable, with peeler remove strip of skin\n    vegetable <- rotate(vegetable)\n  // end-while\n  \n  vegetable <- rinse_with_water(vegetable)\n  \n  return (vegetable)\n// end function definitionpotatoes <- 16\npeeler <- \"swiss peeler\"\nbowl <- [] // empty array\n\nfor potato in potatoes:\n  bowl <- bowl+peel_vegetable(potato, peeler)\n\n// end for-statement  "},{"path":"functions.html","id":"programming-concepts","chapter":"7 Functions","heading":"7.1.1 Programming Concepts","text":"may noticed couple statements adds variable something saves something variable saves . commonly occur programming.","code":""},{"path":"functions.html","id":"adding-to-a-variable","chapter":"7 Functions","heading":"7.1.1.1 Adding to a Variable","text":"two examples add something already existsbowl <- bowl+peel_vegetable(potato)x <- 0; x <- x + 1A key piece info original variable needs data type can accept new piece data. defined bowl array [], can keep adding data type (potato, maybe vegetable) array. tried add two different data typesx <- \"zero\"; x <- x + 1The computer return error message, adding text numbers, \"zero\" + 1, possible.task adding content something already exists happens often languages, C/C++, combine assignment operators math functions, +=. case, x += 1 x = x + 1","code":""},{"path":"functions.html","id":"modifying-a-variable","chapter":"7 Functions","heading":"7.1.1.2 Modifying a Variable","text":"statementvegetable <- rotate(vegetable)vegetable rotating, reassigned variable name. little tricky need caution, ’re completely rewriting value vegetable instead modifying . modified different data type accidentally, program still execute error message assignment, simply sees variable assignment.error happen string numeric value can’t added together. , tricky troubleshoot error result x <- x + 1 part code, even though actual error assignment happened many lines prior x <- .text(x).","code":"x <- 123\nx <- as.text(x) // accidentally uses the wrong function\n// now the data type of x is a string\n\n// many lines of code later\n\nx <- x + 1  // this will cause an error in the code"},{"path":"functions.html","id":"back-to-functions","chapter":"7 Functions","heading":"7.2 Back to Functions","text":"complex function might something like make_cheesy_mashed_potatoes(), equivalent -home chef can make cheesy mashed potatoes demand, long provide raw ingredients.programming parlance, ingredients listed (cheese, potatoes, milk, salt, butter) “arguments”.","code":"make_cheesy_mashed_potatoes(cheese, potatoes, milk, salt, butter)"},{"path":"functions.html","id":"arguments","chapter":"7 Functions","heading":"7.2.1 Arguments","text":"Functions inputs (usually) outputs. function inputs formally called “arguments,” specified programmer, entered within parentheses part function call. cheesy mashed potatoes, specifying kind cheese use, quantity ingredient.example pseudocode, luckily function calls look across languages.already mentioned print common built-function. languages number built-functions commonly used, paste function R, represented . Let’s look another built function common R Python: round()Built-functions help pages allow see syntax arguments. help files include definitions arguments, ’re required default, examples use.syntax Python round(number, ndigits=None)syntax R round(x, digits = 0, ...), x numeric vector.https://search.r-project.org/R/refmans/base/html/Round.html\nhttps://docs.python.org/3/library/functions.html#roundThe second argument languages indicates number digits along default value. Since ’s default value, don’t necessarily need include argument function call.example R isAnother argument common many functions deal statistics handle missing NA values, example, function mean(): mean(x, na.rm = FALSE) default value na.rm FALSE, indicating NA values removed calculation.Optional arguments like may come pre-supplied default, case na.rm = FALSE NAvalues retained, unless argument manually changed TRUE.working functions, vast majority programming, important keep mind two thingsThe arguments functionWhich arguments optional, defaultsA function run long required arguments provided, resulting output may match expectations unless recognize optional arguments included default values.","code":"# these variables have quantities in oz\ncheese <- 16\npotatoes <- 32\nmilk <- 8\nsalt <- 0.125\nbutter <- 4\n\nmake_cheesy_mashed_potatoes(cheese, potatoes, milk, salt, butter)\n\npaste(\"this function uses\", cheese, \"oz of cheese\")\nround(c(1.4, 2.5, 3.5))## [1] 1 2 4"},{"path":"functions.html","id":"libraries","chapter":"7 Functions","heading":"7.3 Libraries","text":"’ve already discussed built-functions. Built functions often limited basic tasks include complex custom functions may use. Now, can code complex functions , building built functions, take lot time require -depth programming knowledge.good news programming languages optional “libraries” (packages, modules, depending term programming language choice uses) include additional functions, beyond built function. creating new function scratch, worthwhile check whether library exists includes function want .Using cheesy mashed potatoes example, might use programming library find recipe uses different ingredients. want make cheesy mashed potatoes scratch, don’t time . Luckily someone else created function uses instant mashed potatoes instead raw potatoes.Libraries also useful mean computer programming language choice don’t need always every single function hand. set saves computer disk space, ensures don’t recreate wheel make every function scratch, provides level standardization (e.g., everyone uses reference “recipe” output input, across users).good rule thumb seems like function want broadly useful, someone likely created library containing . also true niche domain-specific functions: task one comes lot analysis, likely library functions analysis tasks.Finding ‘right’ library function need can overwhelming, good starting point official library collection programming language, CRAN R PyPI Python.","code":""},{"path":"functions.html","id":"accessing-functions-in-libraries","chapter":"7 Functions","heading":"7.3.1 Accessing functions in libraries","text":"syntax accessing functions libraries varies programming language follows general process :Install library source. need .Load import library. need every time want access function library. convention, libraries loaded top script, , people, can see glance libraries needed run script.Use functions normal.","code":""},{"path":"functions.html","id":"function-names","chapter":"7 Functions","heading":"7.3.2 Function names","text":"many function names make sense English language, may functions different libraries name. programming language know function trying access? default, language use function recently loaded imported package.Let’s say two mean() functions, one library_A one library_B. differ default settings:library_A defauls na.rm = TRUElibrary_B defaults na.rm = FALSEIf load libraries order library_A library_B use mean() function, using mean() function library_B.result NA.Conversely, load library_B library_A, use mean() function library_A.value 5.4.tricky part happens invisibly. may may - depending programming language - warning two libraries contain functions name. , keeping track order loading important. get unexpected results, can double check library function using .better method explicit function calling. programming languages allow syntax along lines library:function() specify use function stated library.","code":"load(library_A)\nload(library_B)\n\nvalues <- c(2, 4, 7, 5, 9, NA)\nmean(values)load(library_B)\nload(library_A)\n\nvalues <- c(2, 4, 7, 5, 9, NA)\nmean(values)load(library_B)\nload(library_A)\n\nvalues <- c(2, 4, 7, 5, 9, NA)\nlibrary_B:mean(values)\n\n#result will be `NA`"},{"path":"functions.html","id":"aliases","chapter":"7 Functions","heading":"7.3.3 Aliases","text":"may encounter concept “alias” library. common Python, users can set alias library name, use going forward rather writing full library name. mostly come looking help online, wondering seeing abbreviations.example, Python uses import term load library (“package” Python calls ) allows setting alias using import package alias syntax. convention, many Python users use standard aliases common packages, :Functions can called using explicit package:function syntax, pd.DataFrame designate pandas DataFrame object.","code":"import pandas as pd\nimport numpy as np"},{"path":"functions.html","id":"exercise-create-popcorn-function","chapter":"7 Functions","heading":"7.3.4 Exercise: Create Popcorn Function","text":"Timing: 15 minutesLet’s return section 2 activity group created algorithm make popcorn.adapt step step narrative algorithm function called make_popcorn()?arguments included, default values set?function look different others group? tell computer function wanted use?","code":"# specify which library we want to get a function from, \n# in this case instructor Steph\n\nfrom Steph import make_popcorn()\n\n# set arguments and defaults\n\nmake_popcorn(type = microwave, time = 2 minutes, \n  flavor = movie_theater_flavor, seasoning = TRUE)\n\n# example in use\n# keeping all defaults\n# except changing time because this microwave \n# is known to burn popcorn at recommended time\n\nmake_popcorn(time = 1.5 minutes)# specify which library we want to get a function from, \n# in this case instructor Kat\n\nfrom Kat import make_popcorn()\n\n# The arguments and defaults for this library is\n# make_popcorn(quantity_popcorn, quantity_oil = 1, type = stovetop, \n#              butter = TRUE, salt = \"light\")\n# where quantity is in tbsp\n\n# example in use\n\nmake_popcorn(2)"},{"path":"self-documenting-code.html","id":"self-documenting-code","chapter":"8 Self-Documenting Code","heading":"8 Self-Documenting Code","text":"’ve mentioned , ’s worth repeating. certain habits help create self-documenting code, reduce need large amount outside documentation. habits using comments descriptive names.","code":""},{"path":"self-documenting-code.html","id":"variable-names","chapter":"8 Self-Documenting Code","heading":"8.1 Variable Names","text":"Variable names self-describing, naming conventions restrictions know . Yes, ’ve researchers schedule consultation ask code wasn’t running variable names violated restriction.","code":""},{"path":"self-documenting-code.html","id":"naming-restrictions","chapter":"8 Self-Documenting Code","heading":"8.1.1 Naming Restrictions","text":"Variable function names case sensitiveVariables names use alphanumeric characters underscores. Special characters variable names, especially since $ even . mean specific things many languages.Variable names start numeric character, must start letter underscore.\nUnderscores _variable usually predefined meaning different languages.\nUnderscores _variable usually predefined meaning different languages.Variable names contain spaces hyphens.\nspace treat two variables: variable\nhyphen treated minus sign -variable read minus variable\nspace treat two variables: variableThe hyphen treated minus sign -variable read minus variableVariable names reserved words, ","code":""},{"path":"self-documenting-code.html","id":"naming-conventions","chapter":"8 Self-Documenting Code","heading":"8.1.2 Naming Conventions","text":"Pro Tip: Choose convention use consistentlycamelCaseuse_of_underscoreADifferentTypeOfCamelCaseALLCAPS means something specific certain languages, constants C/C++. can used, avoid .","code":""},{"path":"self-documenting-code.html","id":"comments","chapter":"8 Self-Documenting Code","heading":"8.2 Comments","text":"Just like metadata, comments love notes future self.Comments programming scripts programmer. computer doesn’t see comments . just ignores . use comments supplement self-describing variable names. variable name tells ; comments tell whyI’ve seen code grad students without comments , gently asked remember certain things weren’t working six months, suggested adding comments ’d easier pick back future.language different characters begin comment line comment block. single line comments, comment start special characters go end line.Python, R, Ruby, Bash# commentPythonSQL-- commentC/C++, JavaScript, PHP, Java, C#// commentHTML<!-- comment, can go multiple lines -->","code":"'''\nThis is a \nmulti-line comment\n'''/* \nThis is a \nmulti-line comment \n*/"},{"path":"self-documenting-code.html","id":"multi-line-comment-trick","chapter":"8 Self-Documenting Code","heading":"8.2.1 Multi-Line Comment Trick","text":"trick easily using multi-line commentsMulti-line comments often use block code testing different scripts C/C++ JavaScript, block text html. adding removing beginning/end code bit pain.However, ’s trick:Always beginning + end end code block want comment , just need add beginning.’s similar html","code":"/* \nthis is a \nmulti\nline\nblock of code\ncommented out\nand here is the end \n/* */<!-- \nThis is a comment, \nwhich can go multiple lines \nand it doesn't matter that the end\nalso has the beginning of a comment block\nit's still commented out\n<!-- -->"},{"path":"common-issues.html","id":"common-issues","chapter":"9 Common Issues","heading":"9 Common Issues","text":"common issues ’ve seen consultations. ’ve covered prior chapters, ’s worth list review.","code":""},{"path":"common-issues.html","id":"difference-between-and","chapter":"9 Common Issues","heading":"9.1 Difference between = and ==","text":"former, = used set something equal x = 5 \nvariable x equal , value , 5. Conversely, \ndouble equal == used test equality. instance, set\nvariable x equal value 5, code x == 5 return True\ncode x == 6 return False.","code":""},{"path":"common-issues.html","id":"spelling-and-capitalization-matter","chapter":"9 Common Issues","heading":"9.2 Spelling and capitalization matter","text":"Programming languages generally case-sensitive. variable x \ndifferent variable X. Likewise, \nfunction mean() function Mean() separate functions.’s easier list languages case sensitive :SQL commands case-sensitive, ’s common practice see \ncommands -caps, SELECT, makes reading argument easierFunctions Excel case-sensitiveHTML tags generally case-sensitive, however, class names HTML \nCSS case-sensitive., ’s easier just assume everything case-sensitive.","code":""},{"path":"common-issues.html","id":"special-characters-and-reserved-words","chapter":"9 Common Issues","heading":"9.3 Special characters and reserved words","text":"Many programming languages reserve specific words specific tasks.\nexample, function called sum() fairly common across\nlanguages. make alternate function called\nsum(), may lead unexpected results using sum()\nfunction, ’s better avoid using name.Similarly, best practice avoid naming variables objects \ncommon function names. , write code like\nsum = sum(), get confusing , may lead \nunexpected results code behavior downstream.true certain characters. Many programming languages\ntreat NA special class missing value. \n\"NA\", instead character string containing \nletters NA.","code":""},{"path":"common-issues.html","id":"ending-a-code-chunk","chapter":"9 Common Issues","heading":"9.4 Ending a code chunk","text":"Certain programming languages require character end line statement.C/C++, Java, PHP require semicolon ; end lines statements.say statement? technically write codeBut, ’s error code. required semicolon missing.\nCan find ?statement line easier read.","code":"if(x == y){cout << \"values are equal\";x++;cout<<\"x was increased & is now \nequal to \"<<fixed<<setprecision(1)<<x<<endl;}else if(x > y){cout << \"x greater \nthan y\";x--cout<<\"x was reduced & is now equal to \"<< fixed <<setprecision(1)\n<<x<<endl;} else {cout << \"x must be less than y\";x++;cout<<\"x was increased \n& is now equal to \"<<fixed<<setprecision(1)<<x<<endl;}if (x == y) {\n  cout << \"values are equal\";\n  x++;\n  cout << \"x was increased & is now equal to \" << fixed << setprecision(1) << x << endl;\n} else if (x > y) {\n  cout << \"x greater than y\";\n  x--\n  cout << \"x was reduced & is now equal to \" << fixed << setprecision(1) << x << endl;\n} else {\n  cout << \"x must be less than y\";\n  x++;\n  cout << \"x was increased & is now equal to \" << fixed << setprecision(1) << x << endl;\n}"},{"path":"common-issues.html","id":"order-of-execution","chapter":"9 Common Issues","heading":"9.5 Order of Execution","text":"chapter functions, gave example libraries \nfunctions name default last loaded library called,\n’s good habit explicitly specify library using functions \nmight name different library","code":"load(library_B)\nload(library_A)\n\nvalues <- c(2, 4, 7, 5, 9, NA)\n\nlibrary_B:mean(values) \n#result will be `NA`\n\nlibrary_A:mean(values) \n#result will be `5.4`"},{"path":"common-issues.html","id":"order-of-assignment","chapter":"9 Common Issues","heading":"9.6 Order of Assignment","text":"’ve researchers execute code chunks assign value variable,\nreassigns different value variable, undoing first\nassignment.see , ask researcher talk code, gently point\nreassignment. ’s different conditions, ask others looking \ncode understand ., often ’ll share trying different things working\ndata. assignment unneeded, just remove\ncode. using version control (e.g. git), \nable recover code looking previous versions., including code ’s used final script clutters script, \nmakes difficult trace errors occur.","code":"researchVariable <- someFunction(data)\nresearchVariable <- aDifferentFunction(data)\nplot_or_graph <- anotherFunction(researchVariable)\nall of\nthe plot\nor graph\ncode sometimes it's a lot"},{"path":"common-issues.html","id":"matching-delimiters-quotes-parens-brackets","chapter":"9 Common Issues","heading":"9.7 Matching Delimiters: Quotes, Parens, Brackets","text":"Delimiters used indicate boundaries something specific \nsyntax. need matching set, computer knows beginning \nend boundary. missing end quote bracket often throw error; review\nerror trace find complete pair.Many text editors (Sublime Text Notepad++) development environments\n(Jupyter Notebooks RStudio)\nauto-complete end delimiter, sometimes\nneed adjust options.Quotes \" \" ' ' - used text. used within text, either \nescape (often escape character \\), use (\"need  surround contractions double-quotes\")Parentheses ( ) - used functions order operation expressionsCurly-Brackets { } - often used indicate code chunksSquare-Brackets [ ] - used indicate index collection","code":""},{"path":"common-issues.html","id":"reading-and-writing-data-files","chapter":"9 Common Issues","heading":"9.8 Reading and Writing Data Files","text":"Reading writing files can pain point. two things consider\nreading writing filesThe location file respect script request.type file read/written. Different file types require different functions.useful understand navigate directories command line, \nmany keywords shortcuts used create path files.\nrecommended lessons learning Bash command line Resources chapter.example loading CSV file PythonHere folder structure. Folders / end name, \nfiles extension (.csv, .r, etc)example writing CSV file RThe folder structure isHere example saving HTML file (just text file) PythonThe folder structure ","code":"import pandas as pd\n\n# updates the event list based on previously created csv\nevents_df = pd.read_csv(\"../data/events.csv\")- data/\n  - events.csv\n- src/\n  - myPythonFile.ipynb\nwrite.csv(mydata, file = \"output/census_names2.csv\", row.names = FALSE)- project folder/\n  - get_names.r\n  - output/\n    - census_names2.csvimport requests\nfrom bs4 import BeautifulSoup\n\nyear = \"1995\"\nsave_prefix = \"ipeds_\" \nurl = \"https://nces.ed.gov/ipeds/datacenter/DataFiles.aspx?year=\"+year\n\noutput_path = \"./\"+year+\"/\"+save_prefix+year+\"_\"+\".html\"\nwebpage = requests.get(url)\n\nwith open(output_path, 'wb') as file:\n  file.write(webpage.content) - save-linked-files/\n  - save-linked-files.ipynb\n  - 1995/\n    - ipeds_1995_.html"},{"path":"practice.html","id":"practice","chapter":"10 Practice","heading":"10 Practice","text":"section, ’ll work annotating understanding unfamiliar code.","code":""},{"path":"practice.html","id":"new-types-of-conditions-in-sql","chapter":"10 Practice","heading":"10.1 New types of conditions (in SQL)","text":"Consider following SQL command:One option navigating unfamiliar code break code component parts. Using approach, can separate functions (common tasks across programming languages) data-specific variables names get better understanding type data ’re working , code trying .Exercise: Using ’ve learned prior sections, try answer following questions.OceanBuoys term likely refer - object/variable, function?Assuming SELECT function, might ?* character new. might * indicate, combination SELECT?Parsing second line starts , can make educated guess Ocean BuoyName refer , terms variables?Can guess (feel free use Google) LIKE 'S%' LIKE 'K%' indicate?Note ; end line starting . might mean?OceanBuoys term refers table dataframe matrix (really, kind tabular format).SELECT function selects columns OceanBuoys table.* wildcard matching symbol. indicates want return columns table, matter column names .OceanBuoys table must columns named Ocean BuoyName.\nwanted return columns, syntax : SELECT Ocean, BuoyName OceanBuoys\nwanted return columns, syntax : SELECT Ocean, BuoyName OceanBuoysLIKE used pattern matching. code matching values start “S” “K”.\n- conditions row-based conditions returned, analogous SELECT column-specific condition.\n- ; used indicate end statement SQL. tells computer ‘thought’ finished, action thought can commence.Now, can write narrative see code trying ?code returning subset data OceanBuoys table. Starting full OceanBuoys table, return columns table, keep rows Ocean equal “Atlantic” BuoyName value starts “S” “K”. returned data tabular, number columns full OceanBuoys table, likely less rows (met condition).","code":"SELECT * FROM OceanBuoys\nWHERE Ocean = 'Atlantic' AND (BuoyName LIKE 'S%' OR BuoyName LIKE 'K%');"},{"path":"practice.html","id":"nested-for-loops-and-if-else-statements-in-python","chapter":"10 Practice","heading":"10.2 Nested for loops and if else statements (in Python)","text":"Another useful way contextualize unfamiliar code break big chunk code self-contained sections. instance, code lot things - looping task, conditions, maybe subsetting - want understand order operations thing done.useful skill especially helpful troubleshooting. instance, error unexpected result, first item check often: functions, especially loops conditional statements, started ended properly matched fashion?example code scraping content set website pages saving content locally. code chunk uses nested loops, nested else statements loops within else statements.code may look intimidating! remember, ’re less concerned understanding every detail code , understanding loop conditional statement begins ends.Exercise: Review code chunk identify line loop else statement starts ends.First loop\nStarts line:\nEnds line:\nFirst loopStarts line:Ends line:Second loop\nStarts line:\nEnds line:\nSecond loopStarts line:Ends line:(sneaky third line 43?)(sneaky third line 43?)First else statement\nStarts line:\nEnds line:\nFirst else statementStarts line:Ends line:Second else statement\nStarts line:\nEnds line:\nSecond else statementStarts line:Ends line:Third else statement\nStarts line:\nEnds line:\nThird else statementStarts line:Ends line:Fourth else statement\nStarts line:\nEnds line:\nFourth else statementStarts line:Ends line:needs color coded image clarifyFirst loop\nStarts line: 20\nEnds line: 54 (encompasses entire code block line 20 end line 54)\nStarts line: 20Ends line: 54 (encompasses entire code block line 20 end line 54)Second loop\nStarts line: 40\nEnds line: 52 (encompasses entire code block line 40 end line 52)\nStarts line: 40Ends line: 52 (encompasses entire code block line 40 end line 52)First else statement\nStarts line: 26\nEnds line: 54 (matching else line 53, end action line 54)\nStarts line: 26Ends line: 54 (matching else line 53, end action line 54)Second else statement\nStarts line: 30\nEnds line: 37 (matching else line 32, end action line 37)\nStarts line: 30Ends line: 37 (matching else line 32, end action line 37)Third else statement\nStarts line: 43\nEnds line: 45 (matching else, ends line 45 goes next )\nStarts line: 43Ends line: 45 (matching else, ends line 45 goes next )Fourth else statement\nStarts line: 47\nEnds line: 52 (matching else line 49, end action line 52)\nStarts line: 47Ends line: 52 (matching else line 49, end action line 52)","code":"# Code to scrape data from website\n\n1.  base_url = \"https://nces.ed.gov/ipeds/datacenter/\"\n2.  data_url = \"DataFiles.aspx?\"\n3.  year_base = \"year=\"\n4.  years = [\"1995\", \"1996\", \"1997\", \"1998\"]\n5.  session_id = \"&sid=4f8f293f-df75-42cd-9cc0-ed184270cf17&rtid=7\"\n6. \n7.  # what type of files do you want to save?\n8.  file_type = [\"zip\",\"csv\"]\n9. \n10. # where do you want to save locally?\n11. \n12. # save_loc is redundant, but a reminder that you should have locally folders that reflect the years, \n13. # because that's where below is saving to\n14. save_loc = years \n15. \n16. # what kind of prefix do you want on your files\n17. save_prefix = \"ipeds_\" \n18. \n19. # scrape\n20. for year in years:\n21.     url = base_url+data_url+year_base+year+session_id \n22.     webpage = requests.get(url)\n23.     soup = BeautifulSoup(webpage.content, 'html.parser')\n24. \n25. \n26.     if os.path.isdir(\"./\"+year):\n27.         # notice output path has \"year\" as a variable indicating folders\n28.         output_path = \"./\"+year+\"/\"+save_prefix+year+\"_\"+\".html\"\n29.     \n30.         if os.path.exists(output_path):\n31.             print(output_path+\" already exists. Did NOT save.\")\n32.         else:\n33.             # saving the html file\n34.             print(\"saving \"+output_path)\n35.     \n36.             with open(output_path, 'wb') as file:\n37.                 file.write(webpage.content) \n38.             \n39.         # saving files linked on original html page which meet file type requirement\n40.         for link in soup.find_all('a')[0:16]:  \n41.             data_target = link.get('href')\n42.             # data_target[-3:]\n43.             if any(extension == data_target[-3:] for extension in file_type):\n44.                 wget_url = base_url+data_target\n45.                 wget_save = \"./\"+year+\"/\"+save_prefix+data_target.replace(\"/\",\"-\")\n46.     \n47.                 if os.path.exists(wget_save):\n48.                     print(wget_save+\" already exists. Did NOT save.\")\n49.                 else:\n50.                     print(\"SAVING \"+ wget_url+ \" at local location: \"+wget_save)\n51.                     wget.download(wget_url,wget_save)\n52.                     time.sleep(.25) # be kind, don't look like a DDOS attack\n53.     else:\n54.         print(\"\\n!!! save directory \"+year+\" does NOT exist. please create\\n\")"},{"path":"practice.html","id":"new-syntax-and-terms-in-r","chapter":"10 Practice","heading":"10.3 New syntax and terms (in R)","text":"logic underlying programming languages stays consistent, central challenge different languages often special syntax, can take get used . Don’t panic! Familiarity comes experience meantime, Google friend.example R code:Exercise: Go line line annotate, words, line code . , combine written narrative code .line new take logic ’ve covered prior sections; breakdown new terms , guide annotation.Line 1\ndf_new <- df ?\n%>% symbol indicate?\ndf_new <- df ?%>% symbol indicate?Line 2\nselect() function likely ?\nmight mean argument function preceded -?\nselect() function likely ?might mean argument function preceded -?Line 3\nUsing context clues (Google) think mutate() function ?\nnew paste() function three arguments (paste(arg1, arg2, arg3)). think arguments ?\nUsing context clues (Google) think mutate() function ?new paste() function three arguments (paste(arg1, arg2, arg3)). think arguments ?Line 4 & 5 (note: new line strictly necessary, fit page width without needing scroll)\nifelse() statement different format ’ve covered far, concept . Assuming ifelse() statement three arguments (ifelse(condition, mystery1, mystery2)) might two mystery arguments specifying?\nLooking section survey_wave %% c(\"first\", \"second\"), think translate , written explanation task ?\nifelse() statement different format ’ve covered far, concept . Assuming ifelse() statement three arguments (ifelse(condition, mystery1, mystery2)) might two mystery arguments specifying?Looking section survey_wave %% c(\"first\", \"second\"), think translate , written explanation task ?Finally, always important understand data type structure data acted upon. Keep mind, based questions , structure data used ?Starting table/dataframe called “df”, want keep (select) columns except column named “respondent_name”., make new column called “identifier”. new column created pasting together value “respondent_id” column “survey_wave” column, separated underscore., make another new column called “survey_type”. values column determined ifelse statement: value “survey_wave” column values specified list (\"first\", \"second\") (value “first” “second”), value “survey_type” column “phone”. Otherwise, value “person”.","code":"1.  df_new <- df %>% \n2.    select(-respondent_name) %>% \n3.    mutate(identifier = paste(respondent_id, survey_wave, sep = \"_\")) %>% \n4.    mutate(survey_type = \n5.           ifelse(survey_wave %in% c(\"first\", \"second\"), \"phone\", \"in person\"))\n  "},{"path":"practice.html","id":"new-functions-in-stata","chapter":"10 Practice","heading":"10.4 New functions in Stata","text":"’ll conclude challenge Stata, proprietary statistical analysis platform. Stata number unique features syntax can make challenging interpret. (least instructor’s experience, Stata user-friendly, mileage may vary!)Relying ’ve learned far context clues, code ?bit code replace missing values variable previous (n-1) value `variable.","code":"replace variable = variable[_n-1] if missing(variable)"},{"path":"practice.html","id":"add-example-for-cc","chapter":"10 Practice","heading":"10.5 add example for C/C++","text":"","code":""},{"path":"recap-and-consultation-tips.html","id":"recap-and-consultation-tips","chapter":"11 Recap and Consultation Tips","heading":"11 Recap and Consultation Tips","text":"point workshop isn’t make expert, build skillset can read code confident consultations. Let’s first talk errors can pop .","code":""},{"path":"recap-and-consultation-tips.html","id":"narrowing-down-errors","chapter":"11 Recap and Consultation Tips","heading":"11.1 Narrowing Down Errors","text":"might think ’s lot places errors can introduced code,\nespecially ’s hundred lines, can usually narrow errors\nplaces.","code":""},{"path":"recap-and-consultation-tips.html","id":"why-doesnt-my-code-run","chapter":"11 Recap and Consultation Tips","heading":"11.1.1 Why Doesn’t my Code Run?","text":"Syntax errors - missing quote paren ’s supposed close delimiter pair, \nmissing semicolon, computer trying open file doesn’t exist \nlocation indicated path - result error messages. \ncode generally won’t even run.’s nice thing syntax errors, code doesn’t run give\nindication look correct error.’s example R. code isSimilarly, try run something Jupyter Notebook using Python error……get error message……specific location error startedAs stated earlier chapters, ’s important read error message,\nusually bottom working way . Sometimes error messages can \nquite long. want practice particular\nlanguage, recommended lessons Resources chapter.","code":"if (x == y {\n  print(\"values are equal\");\n} else if (x > y) {\n  print(\"x greater than y\");\n} else {\n  print(\"x must be less than y\");\n}> if (x == y {\nError: unexpected '{' in \"if (x == y {\"if (x == y:\n  print(\"values are equal\")\nelif (x > y):\n  print(\"x greater than y\")\nelse:\n  print(\"x must be less than y\")   Cell In[7], line 1\n     if (x == y:\n               ^\nSyntaxError: invalid syntax"},{"path":"recap-and-consultation-tips.html","id":"the-code-runs-but-something-is-wrong","chapter":"11 Recap and Consultation Tips","heading":"11.1.2 The Code Runs, but Something is Wrong","text":"’s little trickier troubleshoot code runs, something\nunexpected. Unexpected output might look like incorrect results, \ngraph chart doesn’t look right. trickier might \nlogic code.Things scan looking logic making sure correct data files\nrequested, making sure location images researcher \nshowing matches file path indicated code.match, ’s useful ask researcher walk code\nexplain . brings us tips approach consultations.","code":""},{"path":"recap-and-consultation-tips.html","id":"approaching-consultations","chapter":"11 Recap and Consultation Tips","heading":"11.2 Approaching Consultations","text":"Consultations may seem scary, especially aren’t familiar particular language, nice thing programming languages concepts similar across languages, many issues students researchers come aren’t specific language, per se. , sometimes ’s something simple variable assigned properly. isn’t language specific, requires someone able trace code.tips approaching consultationsInclude prompt anyone scheduling consultation provide much detail possible. Please share anything help prepare meeting. Include specific research question problem. help prepare advance. ’ve followed via email, asking researchers ’d share code/data advance.student talk code\nclear can .\nHelping programming vs statistics (ask help interpreting something Full disclosure, statistician)\nTroubleshooting vs consult\nOk say don’t know! Point documentation learning resources","code":""},{"path":"resources.html","id":"resources","chapter":"12 Resources","heading":"12 Resources","text":"’s list resources, cheat sheets, reference materials, stuff really like recommend.Introduction Programming Logic (Lynne O’Hanlon 2000)","code":""},{"path":"references.html","id":"references","chapter":"References","heading":"References","text":"references must file order preceding file order render","code":""}]
