[["index.html", "Programming Logic for Non-Programmers Chapter 1 About 1.1 Keeping this below for easy reference while we get used to the bookdown format", " Programming Logic for Non-Programmers Kat Koziar and Stephanie Labou 2025-02-02 Chapter 1 About Bookdown reference: https://bookdown.org/yihui/bookdown/usage.html BEGIN pitch() Have you ever wondered how some of your colleagues can look at a computer programming script, with little prior knowledge of the language, and not only read it, but help fix the code? It’s not because they know all programming languages, but because most programming languages use the same concepts and logic. STRUCTURE(workshop) In this interactive workshop, attendees will gain hands-on experience to understand and interpret programming logic. We will cover fundamental topics in programming including: conditional statements, loops, order of operations and logical flow, functions and arguments, and data types. Attendees will practice formulating programming arguments to accomplish common tasks, such as subsetting data based on a set of conditions. WHERE prior_experience == FALSE No coding experience required! Programming logic is transferable across specific languages, so learners will focus on concepts, rather than specific syntax from a specific language. Attendees will learn to interpret programming logic and build confidence to apply their understanding to various programming languages they may encounter. FOR (x in example1:example5) {annotate(x)} To provide real world examples of programming logic in practice, the workshop will integrate hands-on work time with examples of sample code written in R, Python, SQL, Stata, and other languages. Attendees will practice annotating code in human understandable language and discuss the process, and any pitfalls, with their peers and the instructors. IF attendee_need == “learn_programming_logic”: print(“register for this workshop!”) 1.1 Keeping this below for easy reference while we get used to the bookdown format Prerequisites This is a sample book written in Markdown. You can use anything that Pandoc’s Markdown supports, e.g., a math equation \\(a^2 + b^2 = c^2\\). The bookdown package can be installed from CRAN or Github: install.packages(&quot;bookdown&quot;) # or the development version # devtools::install_github(&quot;rstudio/bookdown&quot;) Remember each Rmd file contains one and only one chapter, and a chapter is defined by the first-level heading #. To compile this example to PDF, you need XeLaTeX. You are recommended to install TinyTeX (which includes XeLaTeX): https://yihui.org/tinytex/. "],["intro.html", "Chapter 2 Introduction 2.1 Building a Mental Model 2.2 A Note on Syntax", " Chapter 2 Introduction New intro for Programming Logic 2.1 Building a Mental Model 2.2 A Note on Syntax "],["algorithms.html", "Chapter 3 Algorithms 3.1 Breakout Activity", " Chapter 3 Algorithms overview of algorithms and computer code/scripting 3.1 Breakout Activity "],["loops.html", "Chapter 4 Loops 4.1 Activity - loop trace 4.2 Other Types of Loops 4.3 math example", " Chapter 4 Loops Drawing from Introduction to Programming Logic(Lynne O’Hanlon 2000) Start with for loop as first function term “Populate an array from a for loop” as an early example; pg 376 blank table with good early exercise. Side note about infinite loop, importance of settling bounds What happens if you don’t tell loop to increase? Examples of for loops in multiple languages (Python, C, R)? To decide: all theory and then all practice, or theory/practice/theory/practice? Also writing out result of each iteration otherwise you’ll only get the last result (a common problem) 4.1 Activity - loop trace 4.2 Other Types of Loops while(check at beginning) do-while(check at end) until(check at end) 4.3 math example You can also use math in footnotes like this1. We will approximate standard error to 0.027 References Lynne O’Hanlon. 2000. Introduction to Computer Programming Logic. Kendall/Hunt Pub. Co. http://archive.org/details/introductiontoco0000lynn_03ed. where we mention \\(p = \\frac{a}{b}\\)↩︎ "],["conditionals-and-making-choices.html", "Chapter 5 Conditionals and Making Choices 5.1 Boolean Operators 5.2 Example of true vs false outcome for ifelse 5.3 Activity - if else trace", " Chapter 5 Conditionals and Making Choices which ties into conditionals If, if else Logical flow: if this, else (otherwise) that 5.1 Boolean Operators Equals, not equals, and, or (Boolean operators) - everything boils down to True or False 5.2 Example of true vs false outcome for ifelse 5.3 Activity - if else trace Importance of parentheses in conditionals Example of mismatched or no parentheses "],["functions.html", "Chapter 6 Functions 6.1 Libraries 6.2 Activity reprise for functions", " Chapter 6 Functions Moving into syntax What are functions, arguments in functions (order matters, explicit vs defaults) Can make own but many are prebuilt in languages 6.1 Libraries Plus concept of libraries/packages - functions that other people have built and you can install/import Call back to popcorn - if function is make_popcorn - what is that for? What are your arguments - is it kernels or is it a bag, what time? make_popcorn(type = kernels, time = 15 minutes, butter = TRUE, salt = TRUE) vs make_popcorn() with defaults import cookbook; cookbook.make_popcorn() ### From stephanie import make_popcorn() ### From kat import make_popcorn() 6.2 Activity reprise for functions Libraries are libraries - you’re checking out a book and there’s the specific thing that you need. You don’t need to memorize in your brain - which has limited space - every fact, you can check out a book! Libraries, packages, modules Example: min (R), max (Python), mean (SQL), regression (R, Python, Stata) Can look up documentation, most should specify arguments in each function and syntax, as well as defaults for arguments "],["comments-and-names.html", "Chapter 7 Comments and Names", " Chapter 7 Comments and Names Concept of comments, naming of variables and variables Briefly touch on common conventions (like df for dataframe); ask about disciplinary conventions for abbreviations or naming "],["common-issues.html", "Chapter 8 Common Issues", " Chapter 8 Common Issues Some common issues = vs == (set as equal vs test for equality) Closing quotes and parentheses Overwriting variable names Order of running code matters; variable will be whatever most recently set as Spelling and capitalization matters ‘X’ is different from ‘x’ Ending a statement (needing ; or other conclusion) Direct comparison of multiple syntax, so like the same task in R, Python, C, SQL, Stata, Java You don’t need to memorize specifics! Reading and writing data / files Syntax is going to be specific to a language, or package within a language Missing values may be special class, different between languages Show some examples of reading/writing data in R, Python, Stata, SQL "],["recap-and-consultation-tips.html", "Chapter 9 Recap and Consultation Tips 9.1 Approaching Consultations 9.2 Three Areas For Errors", " Chapter 9 Recap and Consultation Tips Recap - you won’t be an expert, the idea is to build up your skillset 9.1 Approaching Consultations How you may approach consultations - prepare in advance knowing specific question, evening seeing code in advance; have student talk through their code Be clear with what you can and cannot do. Helping with programming vs statistics (for when they ask for help with interpreting something Full disclosure, I am not a statistician) Troubleshooting vs consult Ok to say you don’t know! Point to documentation and learning resources 9.2 Three Areas For Errors Code not running at all → often a syntax error Running unexpectedly / unexpected output input logic output "],["intro-bd.html", "Chapter 10 BD Demo Introduction", " Chapter 10 BD Demo Introduction You can label chapter and section titles using {#label} after them, e.g., we can reference Chapter 2. If you do not manually label them, there will be automatic labels anyway, e.g., Chapter ??. Figures and tables with captions will be placed in figure and table environments, respectively. par(mar = c(4, 4, .1, .1)) plot(pressure, type = &#39;b&#39;, pch = 19) Figure 10.1: Here is a nice figure! Reference a figure by its code chunk label with the fig: prefix, e.g., see Figure 10.1. Similarly, you can reference tables generated from knitr::kable(), e.g., see Table 10.1. knitr::kable( head(iris, 20), caption = &#39;Here is a nice table!&#39;, booktabs = TRUE ) Table 10.1: Here is a nice table! Sepal.Length Sepal.Width Petal.Length Petal.Width Species 5.1 3.5 1.4 0.2 setosa 4.9 3.0 1.4 0.2 setosa 4.7 3.2 1.3 0.2 setosa 4.6 3.1 1.5 0.2 setosa 5.0 3.6 1.4 0.2 setosa 5.4 3.9 1.7 0.4 setosa 4.6 3.4 1.4 0.3 setosa 5.0 3.4 1.5 0.2 setosa 4.4 2.9 1.4 0.2 setosa 4.9 3.1 1.5 0.1 setosa 5.4 3.7 1.5 0.2 setosa 4.8 3.4 1.6 0.2 setosa 4.8 3.0 1.4 0.1 setosa 4.3 3.0 1.1 0.1 setosa 5.8 4.0 1.2 0.2 setosa 5.7 4.4 1.5 0.4 setosa 5.4 3.9 1.3 0.4 setosa 5.1 3.5 1.4 0.3 setosa 5.7 3.8 1.7 0.3 setosa 5.1 3.8 1.5 0.3 setosa You can write citations, too. For example, we are using the bookdown package (Xie 2025) in this sample book, which was built on top of R Markdown and knitr (Xie 2015). References Xie, Yihui. 2015. Dynamic Documents with R and Knitr. 2nd ed. Boca Raton, Florida: Chapman; Hall/CRC. http://yihui.name/knitr/. ———. 2025. Bookdown: Authoring Books and Technical Documents with r Markdown. https://github.com/rstudio/bookdown. "],["bd-demo-methods.html", "Chapter 11 BD Demo Methods 11.1 math example", " Chapter 11 BD Demo Methods We describe our methods in this chapter. Math can be added in body using usual syntax like this 11.1 math example \\(p\\) is unknown but expected to be around 1/3. Standard error will be approximated \\[ SE = \\sqrt{\\frac{p(1-p)}{n}} \\approx \\sqrt{\\frac{1/3 (1 - 1/3)} {300}} = 0.027 \\] You can also use math in footnotes like this2. We will approximate standard error to 0.0273 where we mention \\(p = \\frac{a}{b}\\)↩︎ \\(p\\) is unknown but expected to be around 1/3. Standard error will be approximated \\[ SE = \\sqrt{\\frac{p(1-p)}{n}} \\approx \\sqrt{\\frac{1/3 (1 - 1/3)} {300}} = 0.027 \\]↩︎ "],["references.html", "References", " References references must be in file order preceding this file in order to render Lynne O’Hanlon. 2000. Introduction to Computer Programming Logic. Kendall/Hunt Pub. Co. http://archive.org/details/introductiontoco0000lynn_03ed. Xie, Yihui. 2015. Dynamic Documents with R and Knitr. 2nd ed. Boca Raton, Florida: Chapman; Hall/CRC. http://yihui.name/knitr/. ———. 2025. Bookdown: Authoring Books and Technical Documents with r Markdown. https://github.com/rstudio/bookdown. "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
