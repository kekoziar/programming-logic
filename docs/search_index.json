[["index.html", "Programming Logic for Non-Programmers Chapter 1 About", " Programming Logic for Non-Programmers Kat Koziar and Stephanie Labou 2025-03-03 Chapter 1 About BEGIN pitch() Have you ever wondered how some of your colleagues can look at a computer programming script, with little prior knowledge of the language, and not only read it, but help fix the code? It’s not because they know all programming languages, but because most programming languages use the same concepts and logic. STRUCTURE(workshop) In this interactive workshop, attendees will gain hands-on experience to understand and interpret programming logic. We will cover fundamental topics in programming including: conditional statements, loops, order of operations and logical flow, functions and arguments, and data types. Attendees will practice formulating programming arguments to accomplish common tasks, such as subsetting data based on a set of conditions. WHERE prior_experience == FALSE No coding experience required! Programming logic is transferable across specific languages, so learners will focus on concepts, rather than specific syntax from a specific language. Attendees will learn to interpret programming logic and build confidence to apply their understanding to various programming languages they may encounter. FOR (x in example1:example5) {annotate(x)} To provide real world examples of programming logic in practice, the workshop will integrate hands-on work time with examples of sample code written in R, Python, SQL, Stata, and other languages. Attendees will practice annotating code in human understandable language and discuss the process, and any pitfalls, with their peers and the instructors. IF attendee_need == “learn_programming_logic”: print(“register for this workshop!”) "],["intro.html", "Chapter 2 Introduction 2.1 Building a Mental Model 2.2 A Note on Syntax", " Chapter 2 Introduction This is a different type of programming workshop. One that doesn’t require a computer, but instead intends to help you build mental models of how computer programming works. You will learn the logic behind programming, and also methods for identifying errors in algorithms and code that the computer doesn’t see. The only technology required, besides the ability to view this lesson, is something to write with and a piece of paper. 2.1 Building a Mental Model Our experience with computational consultations is often student researchers will take someone else’s code and try to adapt it for their own research, but they use the code without knowing how it does what it does. This means they’re unable to easily update the script, will create errors they don’t know how to address, and even import errors already in the script. Sometimes they can’t even adapt it to use the original data which is in a different location on their computer. They can’t really read the code, but are reliant on the computer reading the code. The purpose of this workshop isn’t just to introduce you to programming logic, it’s to provide a safe space to practice thinking through what the computer does by tracing algorithms and code snippets instead of having the computer just do it. 2.2 A Note on Syntax Syntax is the formal structure of a computer programming language. Assembly, C/C++, C#, Python, and R all have formal language structures so the computer knows how to read the code. But, sometimes syntax gets in the way of learning concepts. Luckily, most programming concepts are the same across all languages. The syntax we will use for most of the examples will be something called psuedocode. Pseudocode focuses on concepts and tasks, not syntax. You don’t need to worry if there is a semicolon or parenthesis out of place when you write in psuedocode, you’ll still know how to interpret what is written. We will also introduce programming examples in different languages, so you can start to recognize the similarities and differences between the languages. You won’t be an expert by end of this workshop, but we will help you build your skillset so hopefully you’re more comfortable reading known (and unknown) computer languages. "],["algorithms.html", "Chapter 3 Algorithms 3.1 What Are Algorithms 3.2 Breakout Activity", " Chapter 3 Algorithms 3.1 What Are Algorithms Most people have heard the term algorithm, especially in relation to AI or social media feeds, but what is an algorithm? An algorithm is a set of instructions for how to do something. For AI, the term algorithm is often used as a term to represent the overall way that whatever AI that you’re working with was trained to do what it does. For social media feeds, an algorithm will determine how the platform selects which content is delivered to a user. Algorithms can be very simple or very complex. A common analogy for an algorithm is a recipe. A recipe includes a set of ingredients, which are like the variables in your code, then lists instructions on what to do with the ingredients. But, a big difference between common recipes that you are used to seeing and an algorithm is you have to be very exact and specific when you tell a computer to do something. It isn’t enough to tell a computer, “get the data.” You have to tell it where the data is located, what format it is in, how to read it, and what format you want the data in for use in your script. So let’s do an example with a recipe on how to make cheesy mashed potatoes. The steps are easy enough: Take potatoes and boil them until they’re done. Drain. Add butter, milk, salt/pepper to taste. Mash. Fold in cheese. Eat. Most of us would know how to do this because we infer the instructions that are missing. But, computers aren’t intelligent like humans. They need to be explicitly told how to do something. How many potatoes? What does boil mean? What does done mean? (which is also a question I asked my mom when reading my grandmother’s recipes.) Computer code needs to be explicit and complete. Let’s see what that looks like with the first part of an algorithm. Algorithm for peeling potatoes for Cheesy Mashed Potatoes Get three pounds of russet potatoes. Get bowl large enough to hold three pounds of russet potatoes. Get a vegetable peeler. Take one potato. Peel potato. Rinse potato with water. Place peeled potato in bowl Repeat 4-7 until all potatoes are washed and peeled When you start breaking down the process into specific actions, the instructions can get quite lengthy! But this is what we need to do in order to “instruct” the computer what we want to do: splitting a large complex overall task into simple tasks that can be done one action at a time. Essentially, that’s what computer processors do - one action at a time. Computers with multi-core processors can do multiple actions simultaneously, one action for each core. It’s just the computer is so fast, it looks like it’s doing everything at once, but it still executes commands step by step. 3.2 Breakout Activity Timing: 15 minutes of breakout group work, followed by 10 minutes of full group discussion. For this activity, your group will write an algorithm to make popcorn.  “Make popcorn” is something most people have at least a general understanding of how to do (even more so than making cheesy mashed potatoes) but remember: in this scenario, your group needs to provide step-by-step directions for a computer to understand how to make popcorn. As you write out the steps with your group, consider: Are you opening a container at any point? Are you making microwave popcorn, or using a stove, and does that impact the directions? Is time needed to make popcorn consistent, or does this depend on other factors? Is there something the computer should do if the popcorn starts burning, or other “errors” arise? "],["data-types.html", "Chapter 4 Data types 4.1 Variables 4.2 Data Types 4.3 Data Structures 4.4 Review", " Chapter 4 Data types 4.1 Variables Now that we understand the structure and logic of algorithms, we can start on how the natural language of algorithms is translated into programming scripts. In order to do this, we need to introduce closely related concepts of variables, data types, and data structures (Kat’s note: data structures might be too early, but maybe not.) A word that people use a lot when referring to computer code is variable, but what is a variable? A variable is a placeholder for some type of data that will be used in computer code. ingredients &lt;- cheddar cheese, potatoes, milk, salt, butter We use variables to represent the data that are being used within a program because it’s easy to change it, ingredients &lt;- smoked gouda cheese, potatoes, milk, salt, butter and also easy to build a mental model of how the different variables interrelate. ingredients &lt;- smoked gouda cheese, potatoes, milk, salt, butter ingredient_quantities &lt;- all, 3 lb, 0.5 c, to taste, 8 tbsp 4.1.1 Pro-tip A common rule to help decide what name to use for a variable is, the name should describe what the data represent. If we used the term x - which is commonly used as a variable in math equations - we wouldn’t know what it represents. Using the word ingredients is descriptive, so you have an idea what the data are in the variable - it describes what the variable represents. Something I’d commonly do when helping researchers with their code, especially when I’d see variable names which are abbreviations, is I’d ask them if the abbreviation is something which is commonly used in their field. My questions would usually go something like this: So you know, I’m not an expert in your field. You’re the expert. Can you help me understand a little more about what you’re trying to do in the code? What does w_f represent? Is that something someone who is knowledgeable in your field would recognize? It’s good practice to use self-describing variables which someone in the field would recognize. It’s also a good idea to keep track of information about your data in a README or data dictionary. Honestly, I’ve heard a lot of different terms to describe them, but it’s basically a file that describes your data. I can give you an example if you want. Kat’s favorite dataset example: Leaf Dataset in UCI Data Science Repository (Silva and Maral 2013) At the top of your code when you define your variables, if the variable name doesn’t exactly correlate to something in your dataset’s README file, you can add a comment with the exact term. 4.2 Data Types As we already stated, variables hold some value. (I won’t go into the details of how that happens on a computer, though if you’re interested, I could tell you after the workshop, or at a separate time.) It’s enough for us to know that whenever you see a variable, it correlates with some sort of data. You know how before you can do math, you have to define numbers? Or, more commonly, before you can write and spell a word, you have to define the alphabet the word uses? Or, to use our recipe analogy, before you can cook, you have to define (or identify) food? Computer programming is the same way. Before you can use data, you have to define data types. There are three data types which are ubiquitous across most programming languages. The first two are related to numbers: Integers (int) which are whole numbers: positive, negative, and zero. Floats (float) or floating point numbers, which are real numbers, or numbers with decimals. And the third is related to words and text. Characters (char) which by themselves are a single character, but can be connected together to create a string (str), which is basically text. Most data types specific to any particular language is a special case of one or more of these three data types (such as how a string is a special case of a character). 4.3 Data Structures A data structure is a special framework which holds your data. Again, there are a lot of different types of data structures, but we’ll describe some of the common ones. A single value isn’t strictly a data structure, but it’s worth mentioning they exist. A list is just that, a list of data elements. The nice thing about lists is it can contain a multitude of different data types, and also different data structures. cheeses &lt;- (8, smoked gouda, 0, milk, 16, cheddar, .25, limburger) An array is a common data structure, which at its base is a single-dimension structure. You’ll commonly see an array represented with square brackets. You may encounter text elements in an array ingredients = [cheese, potatoes, milk, salt, butter] or an array of integers quantities &lt;- [16, 32, 8, 0, 4] or floats quantities = [16, 32, 8, 0.125, 4] The data in all cells (or elements) of an array needs to be the same type, which is part of what makes an array different than a list. If an array is created with different data types, many computer languages, such as R or Python, will automatically convert the data to a single data type. This is formally called coercion. Numeric values with text will be coerced to all text, and integers with real numbers to floats, but not the other way around. You may also see this data structure called a vector (which is different than vectors used in math or physics). A matrix is a multi-dimensional array and has the same restrictions as an array, in terms of same data type used throughout. Honestly, it depends on who you’re talking to for how they refer to arrays and matrices, and it’s likely highly dependent on the type of math they’re using in their research. A matrix will have both rows and columns. The number of elements in each row needs to be the same, and the same with the number of elements in each column. Below is a matrix with size \\(i\\) by \\(j\\), which means that there are \\(i\\) number of rows, and \\(j\\) number of columns. The matrix below also demonstrates what is called an index which is basically the address of any particular element in the matrix. \\[\\begin{equation} \\begin{bmatrix} index_{1,1} &amp; index_{1,2} &amp; \\cdots &amp; index_{1,j} \\\\ index_{2,1} &amp; index_{2,2} &amp; \\cdots &amp; index_{2,j} \\\\ \\vdots &amp; \\vdots &amp; \\ddots &amp; \\vdots \\\\ index_{i,1} &amp; index_{i,2} &amp; \\cdots &amp; index_{i,j} \\end{bmatrix} \\end{equation}\\] Using an index for a one-dimensional array is pretty easy. for ingredients &lt;- [cheese, potatoes, milk, salt, butter] the value in ingredients[1] is cheese if we expand it into a matrix \\[\\begin{equation} ingredients = \\begin{bmatrix} potatoes &amp; milk &amp; heavy\\text{ }cream &amp; butter \\\\ Cheddar &amp; Gouda &amp; Parmesan &amp; Muenster \\\\ salt &amp; rosemary &amp; thyme &amp; sage \\end{bmatrix} \\end{equation}\\] the value in ingredients[2,4] is \\(Muenster\\) I want to share that I’ve been programming for a long time, and have done all of the math, and I still will have to double-check that the index I’m referring to in multidimensional arrays or matrices is listed in the correct order. A dataframe is a tabular form with rows and columns, much like a matrix. However, dataframes can contain mixed data types, for instance a column of integers, a column of strings, and another column of floats. Dataframes can also have column names and row names. .cl-c8a908f4{}.cl-c8a4622c{font-family:'Helvetica';font-size:11pt;font-weight:normal;font-style:normal;text-decoration:none;color:rgba(0, 0, 0, 1.00);background-color:transparent;}.cl-c8a68cbe{margin:0;text-align:center;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);padding-bottom:5pt;padding-top:5pt;padding-left:5pt;padding-right:5pt;line-height: 1;background-color:transparent;}.cl-c8a69f42{width:0.75in;background-color:rgba(229, 229, 229, 1.00);vertical-align: middle;border-bottom: 2pt solid rgba(0, 0, 0, 1.00);border-top: 2pt solid rgba(0, 0, 0, 1.00);border-left: 2pt solid rgba(0, 0, 0, 1.00);border-right: 2pt solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-c8a69f43{width:0.75in;background-color:rgba(229, 229, 229, 1.00);vertical-align: middle;border-bottom: 2pt solid rgba(0, 0, 0, 1.00);border-top: 2pt solid rgba(0, 0, 0, 1.00);border-left: 2pt solid rgba(0, 0, 0, 1.00);border-right: 1pt solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-c8a69f4c{width:0.75in;background-color:rgba(229, 229, 229, 1.00);vertical-align: middle;border-bottom: 2pt solid rgba(0, 0, 0, 1.00);border-top: 2pt solid rgba(0, 0, 0, 1.00);border-left: 1pt solid rgba(0, 0, 0, 1.00);border-right: 2pt solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-c8a69f4d{width:0.75in;background-color:rgba(255, 255, 255, 1.00);vertical-align: middle;border-bottom: 1pt solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 2pt solid rgba(0, 0, 0, 1.00);border-right: 2pt solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-c8a69f56{width:0.75in;background-color:transparent;vertical-align: middle;border-bottom: 1pt solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 2pt solid rgba(0, 0, 0, 1.00);border-right: 1pt solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-c8a69f57{width:0.75in;background-color:transparent;vertical-align: middle;border-bottom: 1pt solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 1pt solid rgba(0, 0, 0, 1.00);border-right: 2pt solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-c8a69f58{width:0.75in;background-color:rgba(255, 255, 255, 1.00);vertical-align: middle;border-bottom: 1pt solid rgba(0, 0, 0, 1.00);border-top: 1pt solid rgba(0, 0, 0, 1.00);border-left: 2pt solid rgba(0, 0, 0, 1.00);border-right: 2pt solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-c8a69f60{width:0.75in;background-color:transparent;vertical-align: middle;border-bottom: 1pt solid rgba(0, 0, 0, 1.00);border-top: 1pt solid rgba(0, 0, 0, 1.00);border-left: 2pt solid rgba(0, 0, 0, 1.00);border-right: 1pt solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-c8a69f61{width:0.75in;background-color:transparent;vertical-align: middle;border-bottom: 1pt solid rgba(0, 0, 0, 1.00);border-top: 1pt solid rgba(0, 0, 0, 1.00);border-left: 1pt solid rgba(0, 0, 0, 1.00);border-right: 2pt solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-c8a69f62{width:0.75in;background-color:rgba(255, 255, 255, 1.00);vertical-align: middle;border-bottom: 2pt solid rgba(0, 0, 0, 1.00);border-top: 1pt solid rgba(0, 0, 0, 1.00);border-left: 2pt solid rgba(0, 0, 0, 1.00);border-right: 2pt solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-c8a69f6a{width:0.75in;background-color:transparent;vertical-align: middle;border-bottom: 2pt solid rgba(0, 0, 0, 1.00);border-top: 1pt solid rgba(0, 0, 0, 1.00);border-left: 2pt solid rgba(0, 0, 0, 1.00);border-right: 1pt solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-c8a69f6b{width:0.75in;background-color:transparent;vertical-align: middle;border-bottom: 2pt solid rgba(0, 0, 0, 1.00);border-top: 1pt solid rgba(0, 0, 0, 1.00);border-left: 1pt solid rgba(0, 0, 0, 1.00);border-right: 2pt solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}ingredientsquantitiesimportancesmoked gouda cheeseall5potatoes3 lb1milk0.5 c3saltto taste4butter8 tbsp2 4.3.1 To make things more confusing: A note on indices A fun “feature” of programming languages is different languages will start their index with different numbers, either 1 or 0. Python is a zero-indexed language, meaning the index of the first element of an array or list is 0, while R is a normal language, I mean, not a zero-indexed language, meaning the index of the first element of an array in R is 1. I like to pretend that this is an extension of mathematicians having arguments over which is the first number, zero or one (yes, I’ve seen these debates). But, I think it has to do with ease of memory management in computers, which is something most researchers who come to us for consultations will not have questions on. So right now, it’s just a quirk. For our workshop, we will use 1 as the first element of an array, because that’s easier to learn logically. 4.4 Review For the next items in review, we want you to type the answer, but don’t press enter until we tell you. We’ll say, 3, 2, 1, enter then you press enter when we say enter. In chat, assign a variable a value, then type the data type in parentheses. e.g. quantity = 1.5 (float) For the following array cheese &lt;- [Cheddar, Gouda, Parmesan, Muenster], what is the value of cheese[4] For the following matrix, \\[\\begin{equation} potatoes = \\begin{bmatrix} Yukon\\text{ }Gold &amp; Red\\text{ }Gold &amp; Gala \\\\ Yellow\\text{ }Finn &amp; Russet &amp; Fingerling \\\\ Sweet &amp; Kennebec &amp; Red\\text{ }Pontiac \\\\ Yam &amp; German\\text{ }Butterball &amp; Purple\\text{ }Viking \\\\ Carola &amp; Nicola &amp; Canela\\text{ }Russet \\end{bmatrix} \\end{equation}\\]What is the value of potatoes[3,2]? References Silva, Pedro, and Andr Maral. 2013. “Leaf.” UCI Machine Learning Repository. https://doi.org/10.24432/C53C78. "],["loops.html", "Chapter 5 Loops 5.1 for loops 5.2 Practicing a Trace 5.3 Other Types of Loops 5.4 Caveats", " Chapter 5 Loops The nice thing about the terms used for the control structures in most programming languages is they are usually self-describing. We’re going to talk about loops now. Loops are common events in programming scripts. It is what the computer uses to listen for user-input. It’s also what researchers use when they want to apply a statistical method over several data files, or several columns within a data table. 5.1 for loops The for loop is probably the most common type of loop. It executes a chunk of code for a certain number of times. The common structure of most for loops is for variable in a collection do something Now, a collection can be a list of text items, such as cheesy mashed potato ingredients, but it can also be a range of numbers, like 1 to 5 (which is programming speak for 1 2 3 4 5) or 7 to 13 (which is 7 8 9 10 11 12 13). Let’s see what this looks like in action using a basic list of cheesy mashed potatoes ingredients: ingredients &lt;- cheddar cheese, potatoes, milk, salt, butter for ingredient in ingredients write(ingredient) Before we look at any real world code, we will manually go through some example loops, without the computer doing the work for us. Practicing a trace on tasks that are simple, like writing each ingredient in a collection, will help us build skills for, and comfort with, reading complex code. 5.2 Practicing a Trace Timing: 10 minutes You will need: a piece of paper and writing implement Let’s set up our trace exercise. The example loop is: ingredients &lt;- cheddar cheese, potatoes, milk, salt, butter for ingredient in ingredients write(ingredient) At the top of your paper, write out the ingredients assignment (ingredients &lt;- cheddar cheese, potatoes, milk, salt, butter). On the line below that we’re going to create headers for all of the variables used within the for loop code block. Starting on the left, write the term loop iteration, then ingredient in the center of the line, then the term write on the right of the line. Your paper should look something like this: .cl-c8d02b5a{}.cl-c8cb4388{font-family:'Helvetica';font-size:11pt;font-weight:normal;font-style:normal;text-decoration:none;color:rgba(0, 0, 0, 1.00);background-color:transparent;}.cl-c8cd8896{margin:0;text-align:center;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);padding-bottom:5pt;padding-top:5pt;padding-left:5pt;padding-right:5pt;line-height: 1;background-color:transparent;}.cl-c8cd88aa{margin:0;text-align:left;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);padding-bottom:5pt;padding-top:5pt;padding-left:5pt;padding-right:5pt;line-height: 1;background-color:transparent;}.cl-c8cd9b88{width:0.75in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 1pt solid rgba(190, 190, 190, 1.00);border-left: 1pt solid rgba(190, 190, 190, 1.00);border-right: 1pt solid rgba(190, 190, 190, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-c8cd9b89{width:0.75in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 1pt solid rgba(190, 190, 190, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-c8cd9b92{width:0.75in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 1pt solid rgba(190, 190, 190, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 1pt solid rgba(190, 190, 190, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-c8cd9b93{width:0.75in;background-color:transparent;vertical-align: middle;border-bottom: 1pt solid rgba(190, 190, 190, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 1pt solid rgba(190, 190, 190, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-c8cd9b94{width:0.75in;background-color:transparent;vertical-align: middle;border-bottom: 1pt solid rgba(190, 190, 190, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-c8cd9b9c{width:0.75in;background-color:transparent;vertical-align: middle;border-bottom: 1pt solid rgba(190, 190, 190, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 1pt solid rgba(190, 190, 190, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-c8cd9b9d{width:0.75in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 1pt solid rgba(190, 190, 190, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-c8cd9ba6{width:0.75in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-c8cd9ba7{width:0.75in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 1pt solid rgba(190, 190, 190, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-c8cd9ba8{width:0.75in;background-color:transparent;vertical-align: middle;border-bottom: 1pt solid rgba(190, 190, 190, 1.00);border-top: 0 solid rgba(255, 255, 255, 0.00);border-left: 1pt solid rgba(190, 190, 190, 1.00);border-right: 1pt solid rgba(190, 190, 190, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-c8cd9ba9{width:0.75in;background-color:transparent;vertical-align: middle;border-bottom: 1pt solid rgba(190, 190, 190, 1.00);border-top: 0 solid rgba(255, 255, 255, 0.00);border-left: 0 solid rgba(255, 255, 255, 0.00);border-right: 0 solid rgba(255, 255, 255, 0.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-c8cd9bb0{width:0.75in;background-color:transparent;vertical-align: middle;border-bottom: 1pt solid rgba(190, 190, 190, 1.00);border-top: 0 solid rgba(255, 255, 255, 0.00);border-left: 0 solid rgba(255, 255, 255, 0.00);border-right: 1pt solid rgba(190, 190, 190, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-c8cd9bb1{width:0.75in;background-color:transparent;vertical-align: middle;border-bottom: 1pt solid rgba(190, 190, 190, 1.00);border-top: 1pt solid rgba(190, 190, 190, 1.00);border-left: 1pt solid rgba(190, 190, 190, 1.00);border-right: 1pt solid rgba(190, 190, 190, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-c8cd9bba{width:0.75in;background-color:transparent;vertical-align: middle;border-bottom: 1pt solid rgba(190, 190, 190, 1.00);border-top: 1pt solid rgba(190, 190, 190, 1.00);border-left: 0 solid rgba(255, 255, 255, 0.00);border-right: 0 solid rgba(255, 255, 255, 0.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-c8cd9bbb{width:0.75in;background-color:transparent;vertical-align: middle;border-bottom: 1pt solid rgba(190, 190, 190, 1.00);border-top: 1pt solid rgba(190, 190, 190, 1.00);border-left: 0 solid rgba(255, 255, 255, 0.00);border-right: 1pt solid rgba(190, 190, 190, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}ingredients &lt;- cheddar cheese, potatoes, milk, salt, butter loop iteration ingredient write(ingredient) Your paper is formatted so it’s easy to see what’s going on with variable during each loop iteration. This is called a trace, and is often used in software development to help debug the program. It is also a good exercise to help build mental muscles to read code. The next step is to fill in the values for each iteration of the loop. Your paper will now look something like this: .cl-c92d01c2{}.cl-c928d746{font-family:'Helvetica';font-size:11pt;font-weight:normal;font-style:normal;text-decoration:none;color:rgba(0, 0, 0, 1.00);background-color:transparent;}.cl-c928d750{font-family:'Helvetica';font-size:11pt;font-weight:normal;font-style:italic;text-decoration:none;color:rgba(0, 0, 0, 1.00);background-color:transparent;}.cl-c92a83fc{margin:0;text-align:center;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);padding-bottom:5pt;padding-top:5pt;padding-left:5pt;padding-right:5pt;line-height: 1;background-color:transparent;}.cl-c92a83fd{margin:0;text-align:left;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);padding-bottom:5pt;padding-top:5pt;padding-left:5pt;padding-right:5pt;line-height: 1;background-color:transparent;}.cl-c92a957c{width:0.75in;background-color:transparent;vertical-align: middle;border-bottom: 1pt solid rgba(190, 190, 190, 1.00);border-top: 1pt solid rgba(190, 190, 190, 1.00);border-left: 1pt solid rgba(190, 190, 190, 1.00);border-right: 1pt solid rgba(190, 190, 190, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-c92a9586{width:0.75in;background-color:transparent;vertical-align: middle;border-bottom: 1pt solid rgba(190, 190, 190, 1.00);border-top: 1pt solid rgba(190, 190, 190, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-c92a9587{width:0.75in;background-color:transparent;vertical-align: middle;border-bottom: 1pt solid rgba(190, 190, 190, 1.00);border-top: 1pt solid rgba(190, 190, 190, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 1pt solid rgba(190, 190, 190, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-c92a9590{width:0.75in;background-color:transparent;vertical-align: middle;border-bottom: 1pt solid rgba(190, 190, 190, 1.00);border-top: 1pt solid rgba(190, 190, 190, 1.00);border-left: 1pt solid rgba(190, 190, 190, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-c92a9591{width:0.75in;background-color:transparent;vertical-align: middle;border-bottom: 1pt solid rgba(190, 190, 190, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 1pt solid rgba(190, 190, 190, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-c92a959a{width:0.75in;background-color:transparent;vertical-align: middle;border-bottom: 1pt solid rgba(190, 190, 190, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-c92a959b{width:0.75in;background-color:transparent;vertical-align: middle;border-bottom: 1pt solid rgba(190, 190, 190, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 1pt solid rgba(190, 190, 190, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-c92a959c{width:0.75in;background-color:transparent;vertical-align: middle;border-bottom: 1pt solid rgba(190, 190, 190, 1.00);border-top: 0 solid rgba(255, 255, 255, 0.00);border-left: 1pt solid rgba(190, 190, 190, 1.00);border-right: 1pt solid rgba(190, 190, 190, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-c92a95a4{width:0.75in;background-color:transparent;vertical-align: middle;border-bottom: 1pt solid rgba(190, 190, 190, 1.00);border-top: 0 solid rgba(255, 255, 255, 0.00);border-left: 0 solid rgba(255, 255, 255, 0.00);border-right: 0 solid rgba(255, 255, 255, 0.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-c92a95a5{width:0.75in;background-color:transparent;vertical-align: middle;border-bottom: 1pt solid rgba(190, 190, 190, 1.00);border-top: 0 solid rgba(255, 255, 255, 0.00);border-left: 0 solid rgba(255, 255, 255, 0.00);border-right: 1pt solid rgba(190, 190, 190, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-c92a95a6{width:0.75in;background-color:transparent;vertical-align: middle;border-bottom: 1pt solid rgba(190, 190, 190, 1.00);border-top: 1pt solid rgba(190, 190, 190, 1.00);border-left: 1pt solid rgba(190, 190, 190, 1.00);border-right: 1pt solid rgba(190, 190, 190, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-c92a95a7{width:0.75in;background-color:transparent;vertical-align: middle;border-bottom: 1pt solid rgba(190, 190, 190, 1.00);border-top: 1pt solid rgba(190, 190, 190, 1.00);border-left: 0 solid rgba(255, 255, 255, 0.00);border-right: 0 solid rgba(255, 255, 255, 0.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-c92a95ae{width:0.75in;background-color:transparent;vertical-align: middle;border-bottom: 1pt solid rgba(190, 190, 190, 1.00);border-top: 1pt solid rgba(190, 190, 190, 1.00);border-left: 0 solid rgba(255, 255, 255, 0.00);border-right: 1pt solid rgba(190, 190, 190, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}ingredients &lt;- cheddar cheese, potatoes, milk, salt, butter loop iteration ingredient write(ingredient) 1cheddar cheesecheddar cheese2potatoespotatoes3milkmilk (yes, this is a little redundant)4saltsalt (acknowledge the redunancy)5butterbutter (is there an equivalent to horizontal ditto marks?) Note: It’s okay if you didn’t completely fill out both the variable ingredient and the function write ingredient because in this case they are the same. But, it’s important to check what actions are happening to variables when you do a trace. You’ve now completed the first trace exercise of a pseudocode example. Congratulations! In this workshop, we’re focused on the programming logic underlying code, rather than specific syntax, but it can be helpful to look at “real” code doing the same task, to further build out your mental model. If we asked a computer to do the same task we did, using the R language, it would look something like this: ingredients &lt;- c(&quot;cheddar cheese&quot;, &quot;potatoes&quot;, &quot;milk&quot;, &quot;salt&quot;, &quot;butter&quot;) for(ingredient in ingredients){ print(ingredient) } ## [1] &quot;cheddar cheese&quot; ## [1] &quot;potatoes&quot; ## [1] &quot;milk&quot; ## [1] &quot;salt&quot; ## [1] &quot;butter&quot; 5.2.1 Exercise - Loop Trace Now that we’ve practiced a trace using text, let’s practice using number ranges Remember that to a computer, the range written as 2 to 7 represents numbers 2 3 4 5 6 7. For this loop trace, you’ll write out the output of each iteration of this loop: for x in 0 to 5 write x write x*2 Like in the ingredients trace example, you’ll create a table with headers for all of the variables used within the for loop code block. Starting on the left, write the term loop iteration, then write(x) in the center of the line, then the term write(x*2) on the right of the line. Then, fill out the table for each iteration of for x in 0 to 5. Loop Trace .cl-c943ef9a{}.cl-c93fb54c{font-family:'Helvetica';font-size:11pt;font-weight:normal;font-style:normal;text-decoration:none;color:rgba(0, 0, 0, 1.00);background-color:transparent;}.cl-c941631a{margin:0;text-align:center;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);padding-bottom:5pt;padding-top:5pt;padding-left:5pt;padding-right:5pt;line-height: 1;background-color:transparent;}.cl-c9416324{margin:0;text-align:left;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);padding-bottom:5pt;padding-top:5pt;padding-left:5pt;padding-right:5pt;line-height: 1;background-color:transparent;}.cl-c9417576{width:0.75in;background-color:transparent;vertical-align: middle;border-bottom: 1pt solid rgba(190, 190, 190, 1.00);border-top: 1pt solid rgba(190, 190, 190, 1.00);border-left: 1pt solid rgba(190, 190, 190, 1.00);border-right: 1pt solid rgba(190, 190, 190, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-c9417580{width:0.75in;background-color:transparent;vertical-align: middle;border-bottom: 1pt solid rgba(190, 190, 190, 1.00);border-top: 1pt solid rgba(190, 190, 190, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-c9417581{width:0.75in;background-color:transparent;vertical-align: middle;border-bottom: 1pt solid rgba(190, 190, 190, 1.00);border-top: 1pt solid rgba(190, 190, 190, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 1pt solid rgba(190, 190, 190, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-c941758a{width:0.75in;background-color:transparent;vertical-align: middle;border-bottom: 1pt solid rgba(190, 190, 190, 1.00);border-top: 1pt solid rgba(190, 190, 190, 1.00);border-left: 1pt solid rgba(190, 190, 190, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-c941758b{width:0.75in;background-color:transparent;vertical-align: middle;border-bottom: 1pt solid rgba(190, 190, 190, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 1pt solid rgba(190, 190, 190, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-c9417594{width:0.75in;background-color:transparent;vertical-align: middle;border-bottom: 1pt solid rgba(190, 190, 190, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-c9417595{width:0.75in;background-color:transparent;vertical-align: middle;border-bottom: 1pt solid rgba(190, 190, 190, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 1pt solid rgba(190, 190, 190, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-c9417596{width:0.75in;background-color:transparent;vertical-align: middle;border-bottom: 1pt solid rgba(190, 190, 190, 1.00);border-top: 0 solid rgba(255, 255, 255, 0.00);border-left: 1pt solid rgba(190, 190, 190, 1.00);border-right: 1pt solid rgba(190, 190, 190, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-c941759e{width:0.75in;background-color:transparent;vertical-align: middle;border-bottom: 1pt solid rgba(190, 190, 190, 1.00);border-top: 0 solid rgba(255, 255, 255, 0.00);border-left: 0 solid rgba(255, 255, 255, 0.00);border-right: 0 solid rgba(255, 255, 255, 0.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-c941759f{width:0.75in;background-color:transparent;vertical-align: middle;border-bottom: 1pt solid rgba(190, 190, 190, 1.00);border-top: 0 solid rgba(255, 255, 255, 0.00);border-left: 0 solid rgba(255, 255, 255, 0.00);border-right: 1pt solid rgba(190, 190, 190, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-c94175a0{width:0.75in;background-color:transparent;vertical-align: middle;border-bottom: 1pt solid rgba(190, 190, 190, 1.00);border-top: 1pt solid rgba(190, 190, 190, 1.00);border-left: 1pt solid rgba(190, 190, 190, 1.00);border-right: 1pt solid rgba(190, 190, 190, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-c94175a8{width:0.75in;background-color:transparent;vertical-align: middle;border-bottom: 1pt solid rgba(190, 190, 190, 1.00);border-top: 1pt solid rgba(190, 190, 190, 1.00);border-left: 0 solid rgba(255, 255, 255, 0.00);border-right: 0 solid rgba(255, 255, 255, 0.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-c94175a9{width:0.75in;background-color:transparent;vertical-align: middle;border-bottom: 1pt solid rgba(190, 190, 190, 1.00);border-top: 1pt solid rgba(190, 190, 190, 1.00);border-left: 0 solid rgba(255, 255, 255, 0.00);border-right: 1pt solid rgba(190, 190, 190, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}Range 0 to 5 is 0 1 2 3 4 5 loop iteration write(x) write(x*2) 1002123244365486510 By this point, you’re probably thinking that doing a manual trace is a bit tedious. And it is! But again - this is a good way to strengthen your mental model of how loops work, and get you comfortable with thinking through what a chunk of code is trying to do. 5.2.2 Exercise - Trace Nested for Loops So far, we’ve tackled one loop at a time. But loops are flexible and can be “nested”, or embedded within each other. Let’s look at an example the following matrix, which is created using two for loops .cl-c950bc66{}.cl-c94cd1f0{font-family:'Helvetica';font-size:11pt;font-weight:normal;font-style:normal;text-decoration:none;color:rgba(0, 0, 0, 1.00);background-color:transparent;}.cl-c94e5df4{margin:0;text-align:center;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);padding-bottom:5pt;padding-top:5pt;padding-left:5pt;padding-right:5pt;line-height: 1;background-color:transparent;}.cl-c94e6f60{width:0.75in;background-color:rgba(229, 229, 229, 1.00);vertical-align: middle;border-bottom: 2pt solid rgba(0, 0, 0, 1.00);border-top: 2pt solid rgba(0, 0, 0, 1.00);border-left: 2pt solid rgba(0, 0, 0, 1.00);border-right: 2pt solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-c94e6f61{width:0.75in;background-color:rgba(229, 229, 229, 1.00);vertical-align: middle;border-bottom: 2pt solid rgba(0, 0, 0, 1.00);border-top: 2pt solid rgba(0, 0, 0, 1.00);border-left: 2pt solid rgba(0, 0, 0, 1.00);border-right: 1pt solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-c94e6f6a{width:0.75in;background-color:rgba(229, 229, 229, 1.00);vertical-align: middle;border-bottom: 2pt solid rgba(0, 0, 0, 1.00);border-top: 2pt solid rgba(0, 0, 0, 1.00);border-left: 1pt solid rgba(0, 0, 0, 1.00);border-right: 1pt solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-c94e6f74{width:0.75in;background-color:rgba(229, 229, 229, 1.00);vertical-align: middle;border-bottom: 2pt solid rgba(0, 0, 0, 1.00);border-top: 2pt solid rgba(0, 0, 0, 1.00);border-left: 1pt solid rgba(0, 0, 0, 1.00);border-right: 2pt solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-c94e6f75{width:0.75in;background-color:rgba(229, 229, 229, 1.00);vertical-align: middle;border-bottom: 1pt solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 2pt solid rgba(0, 0, 0, 1.00);border-right: 2pt solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-c94e6f7e{width:0.75in;background-color:transparent;vertical-align: middle;border-bottom: 1pt solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 2pt solid rgba(0, 0, 0, 1.00);border-right: 1pt solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-c94e6f7f{width:0.75in;background-color:transparent;vertical-align: middle;border-bottom: 1pt solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 1pt solid rgba(0, 0, 0, 1.00);border-right: 1pt solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-c94e6f80{width:0.75in;background-color:transparent;vertical-align: middle;border-bottom: 1pt solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 1pt solid rgba(0, 0, 0, 1.00);border-right: 2pt solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-c94e6f81{width:0.75in;background-color:rgba(229, 229, 229, 1.00);vertical-align: middle;border-bottom: 1pt solid rgba(0, 0, 0, 1.00);border-top: 1pt solid rgba(0, 0, 0, 1.00);border-left: 2pt solid rgba(0, 0, 0, 1.00);border-right: 2pt solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-c94e6f88{width:0.75in;background-color:transparent;vertical-align: middle;border-bottom: 1pt solid rgba(0, 0, 0, 1.00);border-top: 1pt solid rgba(0, 0, 0, 1.00);border-left: 2pt solid rgba(0, 0, 0, 1.00);border-right: 1pt solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-c94e6f92{width:0.75in;background-color:transparent;vertical-align: middle;border-bottom: 1pt solid rgba(0, 0, 0, 1.00);border-top: 1pt solid rgba(0, 0, 0, 1.00);border-left: 1pt solid rgba(0, 0, 0, 1.00);border-right: 1pt solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-c94e6f93{width:0.75in;background-color:transparent;vertical-align: middle;border-bottom: 1pt solid rgba(0, 0, 0, 1.00);border-top: 1pt solid rgba(0, 0, 0, 1.00);border-left: 1pt solid rgba(0, 0, 0, 1.00);border-right: 2pt solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-c94e6f9c{width:0.75in;background-color:rgba(229, 229, 229, 1.00);vertical-align: middle;border-bottom: 2pt solid rgba(0, 0, 0, 1.00);border-top: 1pt solid rgba(0, 0, 0, 1.00);border-left: 2pt solid rgba(0, 0, 0, 1.00);border-right: 2pt solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-c94e6f9d{width:0.75in;background-color:transparent;vertical-align: middle;border-bottom: 2pt solid rgba(0, 0, 0, 1.00);border-top: 1pt solid rgba(0, 0, 0, 1.00);border-left: 2pt solid rgba(0, 0, 0, 1.00);border-right: 1pt solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-c94e6f9e{width:0.75in;background-color:transparent;vertical-align: middle;border-bottom: 2pt solid rgba(0, 0, 0, 1.00);border-top: 1pt solid rgba(0, 0, 0, 1.00);border-left: 1pt solid rgba(0, 0, 0, 1.00);border-right: 1pt solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-c94e6fa6{width:0.75in;background-color:transparent;vertical-align: middle;border-bottom: 2pt solid rgba(0, 0, 0, 1.00);border-top: 1pt solid rgba(0, 0, 0, 1.00);border-left: 1pt solid rgba(0, 0, 0, 1.00);border-right: 2pt solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}IndexColumn 1Column 2Column 3Row 1246Row 2579Row 381012Row 4111315 The pseudocode for how this matrix was created is as follows: num_rows = 4 num_col = 3 matrix &lt;- [] for (i in 1 to num_rows) for (j in 1 to num_col) matrix[i,j] &lt;- (3*(i-1))+(j*2) Before creating the table to help trace the code, answer the following What variables need to be traced? What are the ranges that are used? What calculations do you need to keep track of? Is there anything else? Answers What variables need to be traced? i, j you might think that you need to keep track of loop iteration, but it’s redundant because both i and j start at one. it’s enough to keep track of just their values. What are the ranges that are used? 1 to 4 and 1 to 3 What calculations do you need to keep track of? (3*(i-1))+(j*2) Is there anything else? With a small enough matrix, it’s okay to make an empty one and fill it in Label columns and sketch out a matrix to fill in the variables as the loop iterates for the first five lines (you won’t fill in the whole matrix, but only a portion). Loop Trace .cl-c96f3704{}.cl-c96a81a0{font-family:'Helvetica';font-size:11pt;font-weight:normal;font-style:normal;text-decoration:none;color:rgba(0, 0, 0, 1.00);background-color:transparent;}.cl-c96a81aa{font-family:'Helvetica';font-size:11pt;font-weight:bold;font-style:italic;text-decoration:none;color:rgba(0, 0, 0, 1.00);background-color:transparent;}.cl-c96cb312{margin:0;text-align:center;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);padding-bottom:5pt;padding-top:5pt;padding-left:5pt;padding-right:5pt;line-height: 1;background-color:transparent;}.cl-c96cc65e{width:0.328in;background-color:rgba(242, 242, 242, 1.00);vertical-align: middle;border-bottom: 1pt solid rgba(190, 190, 190, 1.00);border-top: 1pt solid rgba(190, 190, 190, 1.00);border-left: 1pt solid rgba(190, 190, 190, 1.00);border-right: 1pt solid rgba(190, 190, 190, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-c96cc65f{width:0.37in;background-color:rgba(242, 242, 242, 1.00);vertical-align: middle;border-bottom: 1pt solid rgba(190, 190, 190, 1.00);border-top: 1pt solid rgba(190, 190, 190, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-c96cc660{width:0.413in;background-color:rgba(242, 242, 242, 1.00);vertical-align: middle;border-bottom: 1pt solid rgba(190, 190, 190, 1.00);border-top: 1pt solid rgba(190, 190, 190, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-c96cc668{width:0.455in;background-color:rgba(242, 242, 242, 1.00);vertical-align: middle;border-bottom: 1pt solid rgba(190, 190, 190, 1.00);border-top: 1pt solid rgba(190, 190, 190, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-c96cc669{width:1.274in;background-color:rgba(242, 242, 242, 1.00);vertical-align: middle;border-bottom: 1pt solid rgba(190, 190, 190, 1.00);border-top: 1pt solid rgba(190, 190, 190, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-c96cc66a{width:0.497in;background-color:rgba(242, 242, 242, 1.00);vertical-align: middle;border-bottom: 1pt solid rgba(190, 190, 190, 1.00);border-top: 1pt solid rgba(190, 190, 190, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 1pt solid rgba(190, 190, 190, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-c96cc672{width:0.328in;background-color:rgba(242, 242, 242, 1.00);vertical-align: middle;border-bottom: 1pt solid rgba(190, 190, 190, 1.00);border-top: 1pt solid rgba(190, 190, 190, 1.00);border-left: 1pt solid rgba(190, 190, 190, 1.00);border-right: 1pt solid rgba(190, 190, 190, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-c96cc673{width:0.37in;background-color:rgba(242, 242, 242, 1.00);vertical-align: middle;border-bottom: 1pt solid rgba(190, 190, 190, 1.00);border-top: 1pt solid rgba(190, 190, 190, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-c96cc67c{width:0.413in;background-color:rgba(242, 242, 242, 1.00);vertical-align: middle;border-bottom: 1pt solid rgba(190, 190, 190, 1.00);border-top: 1pt solid rgba(190, 190, 190, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-c96cc67d{width:0.455in;background-color:rgba(242, 242, 242, 1.00);vertical-align: middle;border-bottom: 1pt solid rgba(190, 190, 190, 1.00);border-top: 1pt solid rgba(190, 190, 190, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-c96cc67e{width:1.274in;background-color:rgba(242, 242, 242, 1.00);vertical-align: middle;border-bottom: 1pt solid rgba(190, 190, 190, 1.00);border-top: 1pt solid rgba(190, 190, 190, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-c96cc67f{width:0.497in;background-color:rgba(242, 242, 242, 1.00);vertical-align: middle;border-bottom: 1pt solid rgba(190, 190, 190, 1.00);border-top: 1pt solid rgba(190, 190, 190, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 1pt solid rgba(190, 190, 190, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-c96cc686{width:0.328in;background-color:rgba(229, 229, 229, 1.00);vertical-align: middle;border-bottom: 1pt solid rgba(190, 190, 190, 1.00);border-top: 1pt solid rgba(190, 190, 190, 1.00);border-left: 1pt solid rgba(190, 190, 190, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-c96cc687{width:0.37in;background-color:rgba(229, 229, 229, 1.00);vertical-align: middle;border-bottom: 1pt solid rgba(190, 190, 190, 1.00);border-top: 1pt solid rgba(190, 190, 190, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-c96cc688{width:0.413in;background-color:rgba(229, 229, 229, 1.00);vertical-align: middle;border-bottom: 1pt solid rgba(190, 190, 190, 1.00);border-top: 1pt solid rgba(190, 190, 190, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-c96cc690{width:0.455in;background-color:rgba(229, 229, 229, 1.00);vertical-align: middle;border-bottom: 1pt solid rgba(190, 190, 190, 1.00);border-top: 1pt solid rgba(190, 190, 190, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-c96cc691{width:1.274in;background-color:rgba(229, 229, 229, 1.00);vertical-align: middle;border-bottom: 1pt solid rgba(190, 190, 190, 1.00);border-top: 1pt solid rgba(190, 190, 190, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-c96cc692{width:0.497in;background-color:rgba(229, 229, 229, 1.00);vertical-align: middle;border-bottom: 1pt solid rgba(190, 190, 190, 1.00);border-top: 1pt solid rgba(190, 190, 190, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 1pt solid rgba(190, 190, 190, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-c96cc69a{width:0.328in;background-color:transparent;vertical-align: middle;border-bottom: 1pt solid rgba(190, 190, 190, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 1pt solid rgba(190, 190, 190, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-c96cc69b{width:0.37in;background-color:transparent;vertical-align: middle;border-bottom: 1pt solid rgba(190, 190, 190, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-c96cc6a4{width:0.413in;background-color:transparent;vertical-align: middle;border-bottom: 1pt solid rgba(190, 190, 190, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-c96cc6a5{width:0.455in;background-color:transparent;vertical-align: middle;border-bottom: 1pt solid rgba(190, 190, 190, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-c96cc6a6{width:1.274in;background-color:transparent;vertical-align: middle;border-bottom: 1pt solid rgba(190, 190, 190, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-c96cc6ae{width:0.497in;background-color:transparent;vertical-align: middle;border-bottom: 1pt solid rgba(190, 190, 190, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 1pt solid rgba(190, 190, 190, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-c96cc6af{width:0.328in;background-color:transparent;vertical-align: middle;border-bottom: 1pt solid rgba(190, 190, 190, 1.00);border-top: 1pt solid rgba(190, 190, 190, 1.00);border-left: 1pt solid rgba(190, 190, 190, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-c96cc6b0{width:0.37in;background-color:transparent;vertical-align: middle;border-bottom: 1pt solid rgba(190, 190, 190, 1.00);border-top: 1pt solid rgba(190, 190, 190, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-c96cc6b1{width:0.413in;background-color:transparent;vertical-align: middle;border-bottom: 1pt solid rgba(190, 190, 190, 1.00);border-top: 1pt solid rgba(190, 190, 190, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-c96cc6b8{width:0.455in;background-color:transparent;vertical-align: middle;border-bottom: 1pt solid rgba(190, 190, 190, 1.00);border-top: 1pt solid rgba(190, 190, 190, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-c96cc6b9{width:1.274in;background-color:transparent;vertical-align: middle;border-bottom: 1pt solid rgba(190, 190, 190, 1.00);border-top: 1pt solid rgba(190, 190, 190, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-c96cc6c2{width:0.497in;background-color:transparent;vertical-align: middle;border-bottom: 1pt solid rgba(190, 190, 190, 1.00);border-top: 1pt solid rgba(190, 190, 190, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 1pt solid rgba(190, 190, 190, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}num_rows = 4 &amp; num_col = 3Range 1 to num_rows is 1 2 3 4Range 1 to num_col is 1 2 3 i j (3*(i-1))+(j*2) 11(3*(1-1))+(1*2)12(3*(1-1))+(2*2)13(3*(1-1))+(3*2)21(3*(2-1))+(1*2)22(3*(2-1))+(2*2) .cl-c97c40ca{}.cl-c9786cfc{font-family:'Helvetica';font-size:11pt;font-weight:normal;font-style:normal;text-decoration:none;color:rgba(0, 0, 0, 1.00);background-color:transparent;}.cl-c979eff0{margin:0;text-align:center;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);padding-bottom:5pt;padding-top:5pt;padding-left:5pt;padding-right:5pt;line-height: 1;background-color:transparent;}.cl-c97a0166{width:0.75in;background-color:rgba(229, 229, 229, 1.00);vertical-align: middle;border-bottom: 2pt solid rgba(0, 0, 0, 1.00);border-top: 2pt solid rgba(0, 0, 0, 1.00);border-left: 2pt solid rgba(0, 0, 0, 1.00);border-right: 2pt solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-c97a0170{width:0.75in;background-color:rgba(229, 229, 229, 1.00);vertical-align: middle;border-bottom: 2pt solid rgba(0, 0, 0, 1.00);border-top: 2pt solid rgba(0, 0, 0, 1.00);border-left: 2pt solid rgba(0, 0, 0, 1.00);border-right: 1pt solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-c97a0171{width:0.75in;background-color:rgba(229, 229, 229, 1.00);vertical-align: middle;border-bottom: 2pt solid rgba(0, 0, 0, 1.00);border-top: 2pt solid rgba(0, 0, 0, 1.00);border-left: 1pt solid rgba(0, 0, 0, 1.00);border-right: 1pt solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-c97a0172{width:0.75in;background-color:rgba(229, 229, 229, 1.00);vertical-align: middle;border-bottom: 2pt solid rgba(0, 0, 0, 1.00);border-top: 2pt solid rgba(0, 0, 0, 1.00);border-left: 1pt solid rgba(0, 0, 0, 1.00);border-right: 2pt solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-c97a017a{width:0.75in;background-color:rgba(229, 229, 229, 1.00);vertical-align: middle;border-bottom: 1pt solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 2pt solid rgba(0, 0, 0, 1.00);border-right: 2pt solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-c97a017b{width:0.75in;background-color:transparent;vertical-align: middle;border-bottom: 1pt solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 2pt solid rgba(0, 0, 0, 1.00);border-right: 1pt solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-c97a017c{width:0.75in;background-color:transparent;vertical-align: middle;border-bottom: 1pt solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 1pt solid rgba(0, 0, 0, 1.00);border-right: 1pt solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-c97a0184{width:0.75in;background-color:transparent;vertical-align: middle;border-bottom: 1pt solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 1pt solid rgba(0, 0, 0, 1.00);border-right: 2pt solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-c97a018e{width:0.75in;background-color:rgba(229, 229, 229, 1.00);vertical-align: middle;border-bottom: 1pt solid rgba(0, 0, 0, 1.00);border-top: 1pt solid rgba(0, 0, 0, 1.00);border-left: 2pt solid rgba(0, 0, 0, 1.00);border-right: 2pt solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-c97a018f{width:0.75in;background-color:transparent;vertical-align: middle;border-bottom: 1pt solid rgba(0, 0, 0, 1.00);border-top: 1pt solid rgba(0, 0, 0, 1.00);border-left: 2pt solid rgba(0, 0, 0, 1.00);border-right: 1pt solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-c97a0190{width:0.75in;background-color:transparent;vertical-align: middle;border-bottom: 1pt solid rgba(0, 0, 0, 1.00);border-top: 1pt solid rgba(0, 0, 0, 1.00);border-left: 1pt solid rgba(0, 0, 0, 1.00);border-right: 1pt solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-c97a0191{width:0.75in;background-color:transparent;vertical-align: middle;border-bottom: 1pt solid rgba(0, 0, 0, 1.00);border-top: 1pt solid rgba(0, 0, 0, 1.00);border-left: 1pt solid rgba(0, 0, 0, 1.00);border-right: 2pt solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-c97a0198{width:0.75in;background-color:rgba(229, 229, 229, 1.00);vertical-align: middle;border-bottom: 2pt solid rgba(0, 0, 0, 1.00);border-top: 1pt solid rgba(0, 0, 0, 1.00);border-left: 2pt solid rgba(0, 0, 0, 1.00);border-right: 2pt solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-c97a0199{width:0.75in;background-color:transparent;vertical-align: middle;border-bottom: 2pt solid rgba(0, 0, 0, 1.00);border-top: 1pt solid rgba(0, 0, 0, 1.00);border-left: 2pt solid rgba(0, 0, 0, 1.00);border-right: 1pt solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-c97a01a2{width:0.75in;background-color:transparent;vertical-align: middle;border-bottom: 2pt solid rgba(0, 0, 0, 1.00);border-top: 1pt solid rgba(0, 0, 0, 1.00);border-left: 1pt solid rgba(0, 0, 0, 1.00);border-right: 1pt solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-c97a01a3{width:0.75in;background-color:transparent;vertical-align: middle;border-bottom: 2pt solid rgba(0, 0, 0, 1.00);border-top: 1pt solid rgba(0, 0, 0, 1.00);border-left: 1pt solid rgba(0, 0, 0, 1.00);border-right: 2pt solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}Indexj = 1j = 2j = 3i = 1246i = 257i = 3i = 4 5.3 Other Types of Loops There are other types of loops in addition to the commonly used for loop.  The while loop uses a condition that the computer checks if it is TRUE or FALSE at the start of the loop to determine if the code chunk inside the loop will execute. while (condition is TRUE) do something This is different from a for loop, because while a for loop will execute a predetermined number of times, the while loop will execute upon a condition being met. For this loop to work, you need to set the condition before the loop, and change it in the loop. You can write a for loop into a while loop by using a variable which will increment by one for each time the loop is run. This usually isn’t done, but we want to show something you’re already familiar with. For example, recall the initial for loop: ingredients &lt;- cheddar cheese, potatoes, milk, salt, butter for ingredient in ingredients write(ingredient) An equivalent while loop would look like: ingredients &lt;- cheddar cheese, potatoes, milk, salt, butter i = 1 condition_check = length(ingredients) + 1 while i &lt; condition_check write ingredients[i] i &lt;- i + 1 // change for condition check Here’s what it look like in R ingredients &lt;- c(&quot;cheddar cheese&quot;, &quot;potatoes&quot;, &quot;milk&quot;, &quot;salt&quot;, &quot;butter&quot;) i &lt;- 1 condition_check = length(ingredients) + 1 while(i &lt; condition_check){ print(ingredients[i]) i &lt;- i + 1 } ## [1] &quot;cheddar cheese&quot; ## [1] &quot;potatoes&quot; ## [1] &quot;milk&quot; ## [1] &quot;salt&quot; ## [1] &quot;butter&quot; When we identify the variables to keep track of in a while loop trace, we need to add one to check if the condition for entering the loop is met. .cl-c99c2890{}.cl-c997d7fe{font-family:'Helvetica';font-size:11pt;font-weight:normal;font-style:normal;text-decoration:none;color:rgba(0, 0, 0, 1.00);background-color:transparent;}.cl-c9998e82{margin:0;text-align:center;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);padding-bottom:5pt;padding-top:5pt;padding-left:5pt;padding-right:5pt;line-height: 1;background-color:transparent;}.cl-c9998e8c{margin:0;text-align:left;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);padding-bottom:5pt;padding-top:5pt;padding-left:5pt;padding-right:5pt;line-height: 1;background-color:transparent;}.cl-c999a138{width:0.75in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 1pt solid rgba(190, 190, 190, 1.00);border-left: 1pt solid rgba(190, 190, 190, 1.00);border-right: 1pt solid rgba(190, 190, 190, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-c999a142{width:0.75in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 1pt solid rgba(190, 190, 190, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-c999a143{width:0.75in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 1pt solid rgba(190, 190, 190, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 1pt solid rgba(190, 190, 190, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-c999a144{width:0.75in;background-color:transparent;vertical-align: middle;border-bottom: 1pt solid rgba(190, 190, 190, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 1pt solid rgba(190, 190, 190, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-c999a14c{width:0.75in;background-color:transparent;vertical-align: middle;border-bottom: 1pt solid rgba(190, 190, 190, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-c999a14d{width:0.75in;background-color:transparent;vertical-align: middle;border-bottom: 1pt solid rgba(190, 190, 190, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 1pt solid rgba(190, 190, 190, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-c999a156{width:0.75in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 1pt solid rgba(190, 190, 190, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-c999a157{width:0.75in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-c999a158{width:0.75in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 1pt solid rgba(190, 190, 190, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-c999a160{width:0.75in;background-color:transparent;vertical-align: middle;border-bottom: 1pt solid rgba(190, 190, 190, 1.00);border-top: 0 solid rgba(255, 255, 255, 0.00);border-left: 1pt solid rgba(190, 190, 190, 1.00);border-right: 1pt solid rgba(190, 190, 190, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-c999a161{width:0.75in;background-color:transparent;vertical-align: middle;border-bottom: 1pt solid rgba(190, 190, 190, 1.00);border-top: 0 solid rgba(255, 255, 255, 0.00);border-left: 0 solid rgba(255, 255, 255, 0.00);border-right: 0 solid rgba(255, 255, 255, 0.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-c999a162{width:0.75in;background-color:transparent;vertical-align: middle;border-bottom: 1pt solid rgba(190, 190, 190, 1.00);border-top: 0 solid rgba(255, 255, 255, 0.00);border-left: 0 solid rgba(255, 255, 255, 0.00);border-right: 1pt solid rgba(190, 190, 190, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-c999a163{width:0.75in;background-color:transparent;vertical-align: middle;border-bottom: 1pt solid rgba(190, 190, 190, 1.00);border-top: 1pt solid rgba(190, 190, 190, 1.00);border-left: 1pt solid rgba(190, 190, 190, 1.00);border-right: 1pt solid rgba(190, 190, 190, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-c999a16a{width:0.75in;background-color:transparent;vertical-align: middle;border-bottom: 1pt solid rgba(190, 190, 190, 1.00);border-top: 1pt solid rgba(190, 190, 190, 1.00);border-left: 0 solid rgba(255, 255, 255, 0.00);border-right: 0 solid rgba(255, 255, 255, 0.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-c999a16b{width:0.75in;background-color:transparent;vertical-align: middle;border-bottom: 1pt solid rgba(190, 190, 190, 1.00);border-top: 1pt solid rgba(190, 190, 190, 1.00);border-left: 0 solid rgba(255, 255, 255, 0.00);border-right: 1pt solid rgba(190, 190, 190, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}ingredients &lt;- cheddar cheese, potatoes, milk, salt, buttercondition_check = length(ingredients) = 6 loop iteration i ingredients[i] i &lt; condition_check Two other types of loops are a do while loop (check at end) and an until loop (check at end). do something while (condition is TRUE) The logic in the do while loop is while a condition is true, the loop will run. As with the while loop, the condition needs to be set before the loop, and changed within the loop. For the until loop, it’s slightly different. The loop structure is like this do something until (condition is TRUE) The logic is opposite of a do while loop. It will run while the condition is false, and will only exit when the condition is true. These aren’t used often, in fact IMO it’s better to just re-write the logic to use a while loop. 5.3.1 While Trace Let’s practice a while combined with a for trace condition_check &lt;- 5 i &lt;- 1 while (i &lt; condition_check): for j in 1 to 3: write (i*j)+i I’ll give you all a few minutes to write out your trace. Once you’re done, type the largest number you traced in the write statement, but don’t press enter until I give the signal. 5.4 Caveats As you’ve just experienced, loops come with their own set of common issues. Since loops are a frequently encountered concept in programming, we’ll go over the common problems. 5.4.1 Infinite loops What you all just experienced in the previous exercise is called an infinite loop. Infinite loops happen when the condition check is never false. In the case of the above while loop, the check variable was never incremented, so the loop would go through the same process until the programmer interrupts it, the computer fails, or time ends (whichever comes first). 5.4.2 Overwriting outputs for x in files(1 to 500) rename_file(x, &quot;test-case&quot;) Often when researchers are developing a script, they will use test case to develop their algorithm and work out the bugs. In this way, if mistakes are made, it’s on a small scale and easy to correct. Most development is the following. Develop code for a single case Test on a few cases Use on all of the cases If a step is missed, it can be disastrous. I can attest. I wrote a script to rename about 500 files, and in my hubris of being an awesome coder, forgot to test it on a few cases before using it on all of the files. I forgot to change the single rename (\"test-case\") to something that incorporated the loop (\"test-case\"+x) and when the loop was finished, wondered why I went from 500 to only one file in the folder. Luckily, I always backup my data files, so it was an easy mistake to remedy (and makes for a good story on the importance of data backup). "],["conditionals-and-making-choices.html", "Chapter 6 Conditionals and Making Choices 6.1 if Statements 6.2 Comparing Things and Booleans 6.3 Exercise - ifelse trace 6.4 Caveats 6.5 Language examples: Formatting may vary", " Chapter 6 Conditionals and Making Choices 6.1 if Statements Many times in programming, we want to take a certain action only if a certain condition is satisfied. To do this, we can use conditional statements. The most commonly used format of a conditional statement in programming is an if statement, which is often combined with an else statement. This structure tells the computer to check a condition and the next step depends on whether the condition is true or false. It takes the basic form of: IF (condition A is TRUE) do something In terms of our cheesy mashed potatoes algorithm, an if statement might look like this ingredient &lt;- cheddar cheese IF (ingredient is (a type of hard cheese)) grate(ingredient) In that example, we’ve told the computer what to do if the condition is true. We can also specify what to do if the condition is false. For our cheesy mashed potatoes algorithm, we may want to cut cheese into cubes if it is not a hard cheese: ingredient &lt;- cheddar cheese IF (ingredient is (a type of hard cheese)) grate(ingredient) ELSE cube(ingredient) In a generic programming format, a complete if else statement would look like: IF (condition A is TRUE) do something ELSE do something different Here, else is used equivalent to “if not true”, meaning A == FALSE. Furthermore, we are not limited to a single TRUE/FALSE check in an if else statement, where actions are limited to “do something if true, in all other scenarios do something different”. The else if (written as elif in some programming languages) concept allows us to add another sequential check if the if statement is not true. An updated cheesy mashed potato narrative statement could be that if we have a hard cheese, we want to grate it, if we have a soft cheese we want to cube it, and if we have something that is neither hard nor soft cheese, we don’t put it in the potatoes. IF (ingredient is (a type of hard cheese)) grate(ingredient) ELSE IF (ingredient is (a type of soft cheese)) cube(ingredient) ELSE don&#39;t use In generic programming format, this updated statement would look like: IF (condition A is TRUE) do something ELSE IF (condition B is true) do something different ELSE do something even more different Exercise: Let’s try a similar example with the popcorn algorithm from section 2. Write out an if else statement specifying what appliance to use in the case of microwave vs stovetop popcorn. Write out an if, else if, else statement that includes an air fry scenario. Example statement IF (popcorn_type is microwave) use microwave ELSE IF (popcorn_type is stovetop) use stove ELSE use air fryer Your version may look different, and that’s fine! The fun of pseudocode is practicing with the logic of code, rather than getting lots in the details. 6.2 Comparing Things and Booleans In programming, most things boil down to true or false. (Sometimes you may see true/false capitalized as TRUE and FALSE, but the concept is the same. We’ll use both ways throughout.). TRUE and FALSE are formally a boolean data type. Programming languages use boolean operators and comparison operators to determine if a statement is TRUE or FALSE in order to make actions. Common Boolean operators are: and (may also see the ampersand, &amp; or &amp;&amp; used) or (may also see the pipe symbol, | or || used) not (may also see ! to indicate negation, for instance != for “not equal”) Common comparison operators are: &gt; for Greater-than &lt; for Less-than &gt;= for Greater-than or equal-to &lt;= for Less-than or equal-to == for is equal to you should note that == is very different from =. == is the comparison operator, while = is an assignment operator. Another assignment operator you may have noticed us using is &lt;- which is commonly used in R. To practice, you can replace the words “is equal to” or “is assigned the value of” appropriately. A = 6 (A is assigned the value of 6) B &lt;- 8 (B is assigned the value of 8) B == 7 (“B is equal to 7”, where the statement is then evaluated to be true or false. In this case, it is false) 6.3 Exercise - ifelse trace Let’s look at some examples of conditional statements in practice, first by using our cheesy mashed potatoes example, and then with actual code. First, for our recipe example: if cheese == hard: print(&quot;Grate the cheese.&quot;) else if cheese == hard: print(&quot;Cube the cheese.&quot;) else: print(&quot;Do not use this in this recipe.&quot;) If we have cheese &lt;- parmesan we would expect this statement to print out Grate the cheese. If we have cheese &lt;- brie we would expect the output to be Cube the cheese. And if we have cheese &lt;- broccoli we would expect the output to be Do not use this in the recipe. Sidenote: yes, this assumes that somewhere we have specified a list of hard cheese and soft cheeses. For this pseudocode example, we’re using our cheese-based expertise to draw conclusions, but as we’ve covered, we would never assume a computer would know which cheeses were hard or soft! Exercise For this exercise, want you to type the answer in the chat, but don’t press enter until we tell you. We’ll say, 3, 2, 1, enter then you press enter when we say enter. For the code below, what will be the printed output? x &lt;- 37 y &lt;- 42 if x == y: print(&quot;values are equal&quot;) else if x &gt; y: print(&quot;x greater than y&quot;) else: print(&quot;x must be less than y&quot;) Answer x must be less than y What would be the answer if we instead set x and y to: x &lt;- 75 y &lt;- 9 if x == y: print(&quot;values are equal&quot;) else if x &gt; y: print(&quot;x greater than y&quot;) else: print(&quot;x must be less than y&quot;) Answer x greater than y 6.4 Caveats We’re going to cover some more formal processes and syntax. While this won’t impact working with pseudocode, it is important to know when working with the computer. 6.4.1 Order of operations in conditionals Order of operations is critical for conditionals. The computer will go through each condition in order, so if an early condition is found as true, the statement will conclude there and not check the other conditions. if (cheddar == cheese) OR (brie == cheese) OR (broccoli == cheese): print(&quot;This is cheesy&quot;) In this case, because cheddar == cheese is true, the computer doesn’t bother checking the other two statements. 6.4.2 Clarity and Order of Operations in math statements Most of us know the standard order of operation in a math problem (PEMDAS), and most computer languages do, too. 3 + 10 * 2 is solved as 23 (and not 26) and so we don’t need parentheses, but it is good practice to use parentheses to make your code more readable and clear. 3 + (10 * 2) is preferred over 3 + 10 * 2 just as (cheddar == cheese) OR (brie == cheese) OR (broccoli == cheese) is easier to read than cheddar == cheese OR brie == cheese OR broccoli == cheese 6.4.3 Matching parentheses For complex nested conditionals, be sure to use parentheses, and be sure parentheses are matched properly. The code below, without a closing parentheses after “equal”, will continue to expect input. if (x == y) print(&quot;values are equal&quot; As far as the programming language is concerned, you haven’t finished this if statement. So, depending on the language, it might wait to run until you have “completed your thought”, so to speak, and provided the syntax (here the end paren )) indicating that this statement is complete and the program is ready to run. Or if you have mismatched parentheses, the computer might give you an error message. Here’s another example of fun with parentheses: if (x == y) print(&quot;values are equal&quot;)) In this case, there is an extra closing parentheses ) after print(\"values are equal\") that doesn’t have a matching ( anywhere in the statement. The resulting error would look like: Error: unexpected &#39;)&#39; in: &quot;if (x == y) { print(&quot;values are equal&quot;))&quot; 6.5 Language examples: Formatting may vary Programming languages may have specific formatting for conditional statements. This may mean certain brackets must be used, new lines are required between sections, or tab indents are needed. Python requires indentation for code blocks. Code blocks in different structures must be aligned with the same indentation. Programming structures, such as if, else, elif, or for expects : at the end of each statement with the subsequent code block intented by one if x == y: print(&quot;values are equal&quot;) elif x &gt; y: print(&quot;x greater than y&quot;) else: print(&quot;x must be less than y&quot;) The next language examples do not require indentation for code blocks; however, indentation is used because it’s easier for humans to read! R makes use of curly brackets {} to indicate each section of an if else statement. if (x == y) { print(&quot;values are equal&quot;) } else if (x &gt; y) { print(&quot;x greater than y&quot;) } else { print(&quot;x must be less than y&quot;) } The following example is C/C++ syntax. One big difference between C/C++ and Python or R is C/C++ is a compiled programming language, which must first be compiled into a file (often *.exe, but can be anything) that contains the machine-language instructions to be executed. C/C++ syntax looks a lot like R, but requires semicolons at the end of each line to be executed in a code block, while R does not require the semicolon (although R will also run if there are semicolons). if (x == y) { cout &lt;&lt; &quot;values are equal&quot;; } else if (x &gt; y) { cout &lt;&lt; &quot;x greater than y&quot;; } else { cout &lt;&lt; &quot;x must be less than y&quot;; } PHP is very similar to C/C++, but is used for web development. if (x == y) { echo &quot;values are equal&quot;; } elseif (x &gt; y) { echo &quot;x greater than y&quot;; } else { echo &quot;x must be less than y&quot;; } With Bash, you need to be careful of spaces around your operators and parentheses. (cheatsheets https://ss64.com/bash/if.html https://devhints.io/bash#conditionals) This Bash script example compares numbers if (( $x == $y )) ; then echo &quot;values are equal&quot; elif (( $x &gt; $y )) ; then echo &quot;x greater than y&quot; else echo &quot;x must be less than y&quot; fi This Bash script example compares text if [[ &quot;$x&quot; == &quot;$y&quot; ]] ; then echo &quot;the text in x is the same as y&quot; else echo &quot;the text in x is not the same as y&quot; fi 6.5.1 Challenge What are some of the differences you can spot between the different languages? What are the similarities? "],["functions.html", "Chapter 7 Functions 7.1 What is a function? 7.2 Back to Functions 7.3 Arguments 7.4 Libraries 7.5 Accessing functions in libraries 7.6 Activity reprise for functions", " Chapter 7 Functions 7.1 What is a function? A “function” in programming is a piece of code that does a specific task, but packages it so it can be called with a single line of code. Functions can be predefined by developers, and also may be custom to any script. We’ve already been using examples of functions in our psuedocode - such as when we would include the write statement - and formal functions, such as the print, cout, or echo statements we saw in the conditional examples at the end of the previous chapter. The print function does something very simple, which is provide output, either on the R or Python console or interface, that people can read. It’s quite simple to use, but internal code that creates the print function is a little more complex (to say the least). Since communicating output is ubiquitous in all computer languages, each language has some sort of print function as a built in function so it makes it easier for programmers to focus on their particular code. Really, functions are created when you know you’re going to do the same task over and over again. Functions can do something very simple or very complex, and there are a few terms you need to learn, which are ubiquitous across all languages, but it might be easier to show you what a function is then define those terms later. Take our cheesy mashed potatoes example, a simple function might be something like peel_potato(), which would take our first example algorithm on peeling potatoes, and create a function. The original algorithm Algorithm for peeling potatoes for Cheesy Mashed Potatoes Get three pounds of russet potatoes. Get bowl large enough to hold three pounds of russet potatoes. Get a vegetable peeler. Take one potato. Peel potato. Rinse potato with water. Place peeled potato in bowl Repeat 4-7 until all potatoes are washed and peeled But, we don’t want to create a function for the whole thing. We want to create a function that allows us to easily execute what needs to be repeat, Steps 4-7. So the function might look like define function peel_potato(potato, peeler): while(potato has skin): location &lt;- on potato, locate skin potato &lt;- at location on potato, with peeler remove strip of skin potato &lt;- rotate potato // end-while (this is a comment, it begins with // ) potato &lt;- rinse potato with water return (potato) // end function definition A bonus of functions, is you can make them generic if you know the action can be applied over many objects. Perhaps you want to peel both potatoes and carrots, you can make a function for that. define function peel_vegetable(vegetable, peeler): while(vegetable has skin): location &lt;- on vegetable, locate skin vegetable &lt;- at location on vegetable, with peeler remove strip of skin vegetable &lt;- rotate(vegetable) // end-while vegetable &lt;- rinse_with_water(vegetable) return (vegetable) // end function definition Now the peel_vegetable function can be used with multiple objects - well, it could before, but using the variable or argument potato would be confusing when applied to something else. Now that we’ve created a function for peeling vegetables, our algorithm might look like this potatoes &lt;- 16 peeler &lt;- &quot;swiss peeler&quot; bowl &lt;- [] // empty array for potato in potatoes: bowl &lt;- bowl+peel_vegetable(potato) // end for-statement 7.1.1 Programming Concepts You may have noticed a couple of statements that adds a variable to something and saves it to itself or does something to a variable and saves it to itself. These commonly occur in programming. 7.1.1.1 Adding to a Variable These two examples add to something that already exists bowl &lt;- bowl+peel_vegetable(potato) x &lt;- 0; x &lt;- x + 1 A key piece of info here is the original variable needs to be of a data type that can accept the new piece of data. We defined the bowl as an array [], so we can keep adding the same data type (potato, maybe vegetable) to the array. This happens so often that some languages, such as C/C++ will combine assignment operators with math functions, such as += so x += 1 is the same as x = x + 1 If we tried to add two different data types x &lt;- \"zero\"; x &lt;- x + 1 The computer would return an error message. 7.1.1.2 Modifying a Variable For this statement vegetable &lt;- rotate(vegetable) the vegetable is rotating, and being reassigned to the same variable name. This is a little more tricky and in need of caution, because you’re completely rewriting the value in vegetable instead of modifying it. If it were to be modified to a different data type accidentally, the program would still execute with no error message for this assignment, because it simply sees a variable assignment. x &lt;- 123 x &lt;- as.text(x) // accidentally uses the wrong function // now the data type of x is a string // many lines of code later x &lt;- x + 1 // this will cause an error in the code The error will happen because a string and a numeric value can’t be added together but it’s harder to find because the error will point to this location in the code, but the actual error was the assignment which happened many lines above the error. 7.2 Back to Functions A complex function might be something like make_cheesy_mashed_potatoes(), which is the equivalent to having an in-home chef who can make you cheesy mashed potatoes on demand, as long as you provide the raw ingredients. make_cheesy_mashed_potatoes(cheese, potatoes, milk, salt, butter) In programming parlance, these ingredients listed (cheese, potatoes, milk, salt, butter) would be the “arguments”. 7.3 Arguments Functions will have inputs (usually) and outputs. The function inputs are formally called “arguments,” and are specified by the programmer, entered within the parentheses as part of the function call. For cheesy mashed potatoes, this could be specifying what kind of cheese to use, or the quantity of each ingredient. While our example is in pseudocode, luckily function calls look the same across most languages. # these variables have quantities in oz cheese &lt;- 16 potatoes &lt;- 32 milk &lt;- 8 salt &lt;- 0.125 butter &lt;- 4 make_cheesy_mashed_potatoes(cheese, potatoes, milk, salt, butter) paste(&quot;this function uses&quot;, cheese, &quot;oz of cheese&quot;) We already mentioned that print is a common built-in function. Most languages a number of built-in functions which are commonly used, such as the paste function in R, represented above. Let’s look at another built in function that is common to both R and Python: round() Built-in functions have help pages which will allow you to see the syntax and arguments. The help files will include definitions of the arguments, if they’re required or have a default, and examples for use. The syntax for Python is round(number, ndigits=None) The syntax for R is round(x, digits = 0, ...), where x is a numeric vector. https://search.r-project.org/R/refmans/base/html/Round.html https://docs.python.org/3/library/functions.html#round The second argument for both languages indicates the number of digits along with the default value. Since there’s a default value, you don’t necessarily need to include the argument in the function call. An example in R is round(c(1.4, 2.5, 3.5)) ## [1] 1 2 4 Another argument common in many functions which deal with statistics is how to handle missing or NA values, for example, the function mean(): mean(x, na.rm = FALSE) where the default value of na.rm is FALSE, indicating that NA values will not be removed from the calculation. Optional arguments like this may come with a pre-supplied default, in this case that na.rm = FALSE and any NAvalues will be retained, unless this argument is manually changed to TRUE. When working with functions, which is the vast majority of programming, it is important to keep in mind a two things The arguments in a function Which arguments are optional, and what are their defaults A function will run as long as the required arguments are provided, but the resulting output may not match expectations unless you recognize which optional arguments were included with default values. 7.4 Libraries We’ve already discussed built-in functions. Built in functions are often limited to basic tasks and do not include more complex or custom functions that you may with to use. Now, you can code more complex functions yourself, building off of the built in functions, but this would take a lot of time and require more in-depth programming knowledge. The good news is that most programming languages will have optional “libraries” (or packages, or modules, depending on what term your programming language of choice uses) that include additional functions, beyond the built in function. So before creating a new function from scratch, it is worthwhile to check whether a library exists that includes a function that does what you want to do. Using our cheesy mashed potatoes example you might use a programming library to find a recipe that uses different ingredients. You want to make cheesy mashed potatoes from scratch, but don’t have the time to do so. Luckily someone else has created function that uses instant mashed potatoes instead of raw potatoes. You can also think of programming libraries as serving a role similar to actual libraries. For instance, you don’t need to memorize every historical event, or write your favorite novel from scratch - you can check out a book from a library to read and learn more! In the same way, your computer and your programming language of choice doesn’t need to always have every single function on hand, which would take up a lot of space. Instead, it can “check out” (load) a “book” (collection of functions) created by another person. You can then use those additional functions the same way you would any function. This set up saves computer disk space, ensures you don’t have to recreate the wheel and make every function from scratch, and provides a level of standardization (e.g., everyone uses the same reference “book” so output should be the same for the same input, across users). A good rule of thumb is if it seems like the function you want is broadly useful, then someone has likely created a library containing it. This is also true for niche or domain-specific functions: if the task is one that comes up a lot in analysis, there is likely a library that has functions for those analysis tasks. Finding the ‘right’ library for the function you need can be overwhelming, but a good starting point is the official library collection for a programming language, such as CRAN for R or PyPI for Python. 7.5 Accessing functions in libraries The syntax for accessing functions in libraries varies by programming language but follows the general process of: Install the library from the source. You only need to do this once. Load or import the library. You will need to do this every time you want to access a function in a library. By convention, libraries are loaded at the top of a script, so you, and other people, can see at a glance what libraries are needed to run the script. Use the functions as normal. 7.5.1 Caveats 7.5.2 Function names There are only so many function names that make sense in the English language, so there may be functions from different libraries that have the same name. How does the programming language know which function you are trying to access? By default, the language will use the function of the more recently loaded or imported package. Let’s say we have two mean() functions, one from library_A and one from library_B. They differ in their default settings: library_A defauls to na.rm = TRUE library_B defaults to na.rm = FALSE If we load libraries in order library_A then library_B and then use mean() as a function, we will be using the mean() function from library_B. load(library_A) load(library_B) values &lt;- c(2, 4, 7, 5, 9, NA) mean(values) Our result will be NA. Conversely, if we load library_B then library_A, we will use the mean() function from library_A. load(library_B) load(library_A) values &lt;- c(2, 4, 7, 5, 9, NA) mean(values) Our value will be 5.4. The tricky part is that all this happens invisibly. There may or may not - depending on your programming language - be a warning that two libraries contain functions of the same name. So, keeping track of your order of loading is important. If you get any unexpected results, you can double check which library the function you are using is from. A better method is to be explicit about which function you are calling. Most programming languages will allow a syntax along the lines of library:function() to specify use of a function from a stated library. load(library_B) load(library_A) values &lt;- c(2, 4, 7, 5, 9, NA) library_B:mean(values) #result will be `NA` 7.5.3 Aliases You may encounter the concept of an “alias” for a library. This is common in Python, where users can set an alias for a library name, and use that going forward rather than writing out the full library name. This will mostly come up if you are looking for help online, or wondering why you are seeing abbreviations. For example, Python uses the import term to load a library (or “package” as Python calls them) and allows setting an alias using import package as alias syntax. By convention, many Python users will use standard aliases for common packages, such as: import pandas as pd import numpy as np Functions can then be called using the explicit package:function syntax, such as pd.DataFrame to designate a pandas DataFrame object. 7.6 Activity reprise for functions Let’s return to the section 2 activity where your group created an algorithm to make popcorn. How would you adapt your step by step narrative algorithm to be a function called make_popcorn()? What arguments would be included, and would you have any default values set? Does your function look different than others in your group? How would you tell the computer which function you wanted to use? Example functions # specify which library we want to get a function from, in this case instructor Steph from Steph import make_popcorn() # set arguments and defaults make_popcorn(type = microwave, time = 2 minutes, flavor = movie_theater_flavor, seasoning = TRUE) # example in use # keeping all defaults, but changing time because this microwave # is known to burn popcorn at recommended time make_popcorn(time = 1.5 minutes) # specify which library we want to get a function from, # in this case instructor Kat from Kat import make_popcorn() # The arguments and defaults for this library is # make_popcorn(quantity_popcorn, quantity_oil = 1, type = stovetop, # butter = TRUE, salt = &quot;light&quot;) # where quantity is in tbsp # example in use make_popcorn(2) "],["comments-and-names.html", "Chapter 8 Comments and Names", " Chapter 8 Comments and Names Concept of comments, naming of variables and variables Briefly touch on common conventions (like df for dataframe); ask about disciplinary conventions for abbreviations or naming [SL: kind of moved this into ‘caveats’ of functions, flagged to discuss] "],["common-issues.html", "Chapter 9 Common Issues 9.1 Difference between = and == 9.2 Spelling and capitalization matter 9.3 Special characters and words 9.4 Ending a code chunk 9.5 Order of operations 9.6 Others [work in progress]", " Chapter 9 Common Issues Some common issues 9.1 Difference between = and == The former, = is used to set something as equal as in x = 5 where the variable x is equal to, or has a value of, 5. Conversely, the double equal == is used to test for equality. For instance, if we set a variable x to equal the value 5, the code x == 5 would return True and the code x == 6 would return False. 9.2 Spelling and capitalization matter The variable x is different from the variable X. Likewise, a function mean() and a function Mean() would be separate functions. 9.3 Special characters and words Many programming languages reserve specific words for specific tasks. For example, a function called sum() is fairly common across languages. While you could make your own alternate function called sum(), this may lead to unexpected results when using the sum() function Similarly, it is best practice to avoid naming variables or objects the same as common function names. Again, while you could write code like sum = sum(), this will get confusing for you, and may lead to unexpected results and code behavior downstream. The same is true for certain characters. Many programming languages treat NA as a special class of missing value. This is not the same as \"NA\", which would instead be a character string containing the letters NA. 9.4 Ending a code chunk Ending a statement (needing ; or other conclusion) 9.5 Order of operations overwriting/ variable will be whatever most recently set as 9.6 Others [work in progress] Closing quotes and parenthese Direct comparison of multiple syntax, so like the same task in R, Python, C, SQL, Stata, Java  You don’t need to memorize specifics! Reading and writing data / files Syntax is going to be specific to a language, or package within a language Show some examples of reading/writing data in R, Python, Stata, SQL "],["practice.html", "Chapter 10 Practice 10.1 New types of conditions (in SQL) 10.2 Nested for loops and if else statements (in Python) 10.3 New syntax and terms (in R) 10.4 add example for C/C++ 10.5 New functions in Stata", " Chapter 10 Practice In this section, we’ll work on understanding and annotating unfamiliar code. 10.1 New types of conditions (in SQL) Consider the following SQL command: SELECT * FROM OceanBuoys WHERE Ocean = &#39;Atlantic&#39; AND (BuoyName LIKE &#39;S%&#39; OR BuoyName LIKE &#39;K%&#39;); One option for navigating unfamiliar code is to break down the code into its component parts. Using that approach, you can separate out functions (as common tasks across programming languages) from data-specific variables and names to get a better understanding of what type of data you’re working with, and what the code is trying to do. Exercise: Using what we’ve learned in prior sections, try to answer the following questions. What does the OceanBuoys term most likely refer to - object/variable, or function? Assuming that SELECT is a function, what might it do? The * character is new. What might * indicate, in combination with SELECT? Parsing the second line that starts with WHERE, can you make an educated guess about what Ocean and BuoyName refer to, in terms of variables? Can you guess (or feel free to use Google) what LIKE 'S%' and LIKE 'K%' would indicate? Note the ; at the end of the line starting with WHERE. What might this mean? Do your answers match these? The OceanBuoys term here refers to a table or dataframe or matrix (really, any kind of tabular format). The SELECT function selects columns from the OceanBuoys table. The * is a wildcard matching symbol. It indicates that we want to return all columns from the table, no matter what their column names are. The OceanBuoys table must have columns named Ocean and BuoyName. If we wanted to return only these columns, the syntax could be: SELECT Ocean, BuoyName FROM OceanBuoys LIKE is used for pattern matching. This code is matching values that start with “S” or with “K”. - The conditions after WHERE are the row-based conditions for what will be returned, analogous to SELECT for the column-specific condition. - The ; is used to indicate the end of a statement in SQL. It tells the computer that the ‘thought’ is finished, and the action of doing the thought can commence. Now, can you write out a narrative of what you see the code is trying to do? Example written narrative This code is returning a subset of data from the OceanBuoys table. Starting from the full OceanBuoys table, return all the columns from this table, but keep only rows where Ocean is equal to “Atlantic” and where the BuoyName value starts with “S” or “K”. The returned data should be tabular, with the same number of columns as the full OceanBuoys table, but likely with less rows (only those that met the condition). 10.2 Nested for loops and if else statements (in Python) Another useful way to contextualize unfamiliar code is to break down a big chunk of code into self-contained sections. For instance, if the code is doing a lot of things - looping through some task, with some conditions, maybe subsetting - we want to understand the order of operations of each thing that is being done. This is a useful skill and especially helpful when troubleshooting. For instance, if there is an error or unexpected result, a first item to check is often: are functions, especially loops and conditional statements, started and ended properly in matched fashion? Below is an example of code that is scraping content from a set of website pages and saving that content locally. This code chunk uses nested for loops, and nested if else statements with the for loops and within other if else statements. The code may look intimidating! But remember, we’re less concerned here about understanding every detail about what the code is doing, and more about understanding where each loop and conditional statement begins and ends. Exercise: Review the code chunk below and identify on which line each for loop and each if else statement starts and ends. First for loop Starts on line: Ends on line: Second for loop Starts on line: Ends on line: (sneaky third for in line 43?) First if else statement Starts on line: Ends on line: Second if else statement Starts on line: Ends on line: Third if else statement Starts on line: Ends on line: Fourth if else statement Starts on line: Ends on line: # Code to scrape data from website 1. base_url = &quot;https://nces.ed.gov/ipeds/datacenter/&quot; 2. data_url = &quot;DataFiles.aspx?&quot; 3. year_base = &quot;year=&quot; 4. years = [&quot;1995&quot;, &quot;1996&quot;, &quot;1997&quot;, &quot;1998&quot;] 5. session_id = &quot;&amp;sid=4f8f293f-df75-42cd-9cc0-ed184270cf17&amp;rtid=7&quot; 6. 7. # what type of files do you want to save? 8. file_type = [&quot;zip&quot;,&quot;csv&quot;] 9. 10. # where do you want to save locally? 11. 12. # save_loc is redundant, but a reminder that you should have locally folders that reflect the years, 13. # because that&#39;s where below is saving to 14. save_loc = years 15. 16. # what kind of prefix do you want on your files 17. save_prefix = &quot;ipeds_&quot; 18. 19. # scrape 20. for year in years: 21. url = base_url+data_url+year_base+year+session_id 22. webpage = requests.get(url) 23. soup = BeautifulSoup(webpage.content, &#39;html.parser&#39;) 24. 25. 26. if os.path.isdir(&quot;./&quot;+year): 27. # notice output path has &quot;year&quot; as a variable indicating folders 28. output_path = &quot;./&quot;+year+&quot;/&quot;+save_prefix+year+&quot;_&quot;+&quot;.html&quot; 29. 30. if os.path.exists(output_path): 31. print(output_path+&quot; already exists. Did NOT save.&quot;) 32. else: 33. # saving the html file 34. print(&quot;saving &quot;+output_path) 35. 36. with open(output_path, &#39;wb&#39;) as file: 37. file.write(webpage.content) 38. 39. # saving files linked on original html page which meet file type requirement 40. for link in soup.find_all(&#39;a&#39;)[0:16]: 41. data_target = link.get(&#39;href&#39;) 42. # data_target[-3:] 43. if any(extension == data_target[-3:] for extension in file_type): 44. wget_url = base_url+data_target 45. wget_save = &quot;./&quot;+year+&quot;/&quot;+save_prefix+data_target.replace(&quot;/&quot;,&quot;-&quot;) 46. 47. if os.path.exists(wget_save): 48. print(wget_save+&quot; already exists. Did NOT save.&quot;) 49. else: 50. print(&quot;SAVING &quot;+ wget_url+ &quot; at local location: &quot;+wget_save) 51. wget.download(wget_url,wget_save) 52. time.sleep(.25) # be kind, don&#39;t look like a DDOS attack 53. else: 54. print(&quot;\\n!!! save directory &quot;+year+&quot; does NOT exist. please create\\n&quot;) This needs a color coded image to clarify Start and end locations First loop Starts on line: 20 Ends on line: 54 (encompasses entire code block line 20 until end of line 54) Second loop Starts on line: 40 Ends on line: 52 (encompasses entire code block line 40 until end of line 52) First if else statement Starts on line: 26 Ends on line: 54 (the matching else is on line 53, with end of action on line 54) Second if else statement Starts on line: 30 Ends on line: 37 (matching else is on line 32, with end of action on line 37) Third if else statement Starts on line: 43 Ends on line: 45 (no matching else, ends on line 45 and goes into next if) Fourth if else statement Starts on line: 47 Ends on line: 52 (matching else is on line 49, with end of action on line 52) 10.3 New syntax and terms (in R) While the logic underlying programming languages stays consistent, a central challenge is that different languages often have their own special syntax, which can take a while to get used to. Don’t panic! Familiarity comes with experience and in the meantime, Google is your friend. Here is an example of R code: 1. df_new &lt;- df %&gt;% 2. select(-respondent_name) %&gt;% 3. mutate(identifier = paste(respondent_id, survey_wave, sep = &quot;_&quot;)) %&gt;% 4. mutate(survey_type = ifelse(survey_wave %in% c(&quot;first&quot;, &quot;second&quot;), &quot;phone&quot;, &quot;in person&quot;)) Exercise: Go line by line and annotate, in your own words, what that line of code is doing. Then, combine these into a written narrative of what this code is doing. Each line has a new take on the same logic we’ve covered in prior sections; a breakdown of new terms is below, to guide your annotation. Line 1 What is df_new &lt;- df doing here? What does the %&gt;% symbol indicate? Line 2 What is the select() function likely doing? What might it mean that the argument in this function is preceded by -? Line 3 Using context clues (and Google) what do you think the mutate() function does? The new paste() function has three arguments (paste(arg1, arg2, arg3)). What do you think the arguments are for? Line 4 This ifelse() statement has a different format than we’ve covered so far, but the concept is the same. Assuming this ifelse() statement has three arguments (ifelse(condition, mystery1, mystery2)) what might the two mystery arguments be specifying? Looking at the section survey_wave %in% c(\"first\", \"second\"), what do you think this would translate to, as a written explanation of the task here? Finally, it is always important to understand the data type and structure of the data being acted upon. Keep in mind, based on the questions above, what is the structure of the data being used here? Example narrative Starting from the table/dataframe called “df”, we want to keep (select) all columns except the column named “respondent_name”. Then, make a new column called “identifier”. This new column is created by pasting together the value in the “respondent_id” column and the “survey_wave” column, separated by an underscore. Then, make another new column called “survey_type”. The values in this column are determined by an ifelse statement: if the value in the “survey_wave” column is any of the values specified in the list (\"first\", \"second\") (so if the value is “first” or “second”), then the value in the “survey_type” column will be “phone”. Otherwise, the value will be “in person”. 10.4 add example for C/C++ 10.5 New functions in Stata We’ll conclude with a challenge in Stata, a proprietary statistical analysis platform. Stata has a number of unique features and syntax that can make it challenging to interpret. (At least in this instructor’s experience, Stata is not user-friendly, but your mileage may vary!) So, relying on what we’ve learned so far and context clues, what is the code below doing? replace variable = variable[_n-1] if missing(variable) What is Stata doing? This is a bit of code to replace any missing values of variable with with previous (n-1) value of `variable. There are many ways to replace missing values in Stata, this is one. "],["recap-and-consultation-tips.html", "Chapter 11 Recap and Consultation Tips 11.1 Approaching Consultations 11.2 Three Areas For Errors", " Chapter 11 Recap and Consultation Tips Recap - you won’t be an expert, the idea is to build up your skillset 11.1 Approaching Consultations How you may approach consultations - prepare in advance knowing specific question, evening seeing code in advance; have student talk through their code Be clear with what you can and cannot do. Helping with programming vs statistics (for when they ask for help with interpreting something Full disclosure, I am not a statistician) Troubleshooting vs consult Ok to say you don’t know! Point to documentation and learning resources 11.2 Three Areas For Errors Code not running at all → often a syntax error Running unexpectedly / unexpected output input logic output "],["flextables.html", "Chapter 12 Flextables", " Chapter 12 Flextables This reflects nested for loops of row+column .cl-c9aa415a{}.cl-c9a66a76{font-family:'Helvetica';font-size:11pt;font-weight:normal;font-style:normal;text-decoration:none;color:rgba(0, 0, 0, 1.00);background-color:transparent;}.cl-c9a7f2e2{margin:0;text-align:center;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);padding-bottom:5pt;padding-top:5pt;padding-left:5pt;padding-right:5pt;line-height: 1;background-color:transparent;}.cl-c9a80462{width:0.75in;background-color:rgba(229, 229, 229, 1.00);vertical-align: middle;border-bottom: 2pt solid rgba(0, 0, 0, 1.00);border-top: 2pt solid rgba(0, 0, 0, 1.00);border-left: 2pt solid rgba(0, 0, 0, 1.00);border-right: 2pt solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-c9a80463{width:0.75in;background-color:rgba(229, 229, 229, 1.00);vertical-align: middle;border-bottom: 2pt solid rgba(0, 0, 0, 1.00);border-top: 2pt solid rgba(0, 0, 0, 1.00);border-left: 2pt solid rgba(0, 0, 0, 1.00);border-right: 1pt solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-c9a8046c{width:0.75in;background-color:rgba(229, 229, 229, 1.00);vertical-align: middle;border-bottom: 2pt solid rgba(0, 0, 0, 1.00);border-top: 2pt solid rgba(0, 0, 0, 1.00);border-left: 1pt solid rgba(0, 0, 0, 1.00);border-right: 1pt solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-c9a8046d{width:0.75in;background-color:rgba(229, 229, 229, 1.00);vertical-align: middle;border-bottom: 2pt solid rgba(0, 0, 0, 1.00);border-top: 2pt solid rgba(0, 0, 0, 1.00);border-left: 1pt solid rgba(0, 0, 0, 1.00);border-right: 2pt solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-c9a8046e{width:0.75in;background-color:rgba(229, 229, 229, 1.00);vertical-align: middle;border-bottom: 1pt solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 2pt solid rgba(0, 0, 0, 1.00);border-right: 2pt solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-c9a80476{width:0.75in;background-color:transparent;vertical-align: middle;border-bottom: 1pt solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 2pt solid rgba(0, 0, 0, 1.00);border-right: 1pt solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-c9a80477{width:0.75in;background-color:transparent;vertical-align: middle;border-bottom: 1pt solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 1pt solid rgba(0, 0, 0, 1.00);border-right: 1pt solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-c9a80480{width:0.75in;background-color:transparent;vertical-align: middle;border-bottom: 1pt solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 1pt solid rgba(0, 0, 0, 1.00);border-right: 2pt solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-c9a80481{width:0.75in;background-color:rgba(229, 229, 229, 1.00);vertical-align: middle;border-bottom: 1pt solid rgba(0, 0, 0, 1.00);border-top: 1pt solid rgba(0, 0, 0, 1.00);border-left: 2pt solid rgba(0, 0, 0, 1.00);border-right: 2pt solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-c9a80482{width:0.75in;background-color:transparent;vertical-align: middle;border-bottom: 1pt solid rgba(0, 0, 0, 1.00);border-top: 1pt solid rgba(0, 0, 0, 1.00);border-left: 2pt solid rgba(0, 0, 0, 1.00);border-right: 1pt solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-c9a8048a{width:0.75in;background-color:transparent;vertical-align: middle;border-bottom: 1pt solid rgba(0, 0, 0, 1.00);border-top: 1pt solid rgba(0, 0, 0, 1.00);border-left: 1pt solid rgba(0, 0, 0, 1.00);border-right: 1pt solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-c9a8048b{width:0.75in;background-color:transparent;vertical-align: middle;border-bottom: 1pt solid rgba(0, 0, 0, 1.00);border-top: 1pt solid rgba(0, 0, 0, 1.00);border-left: 1pt solid rgba(0, 0, 0, 1.00);border-right: 2pt solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-c9a8048c{width:0.75in;background-color:rgba(229, 229, 229, 1.00);vertical-align: middle;border-bottom: 2pt solid rgba(0, 0, 0, 1.00);border-top: 1pt solid rgba(0, 0, 0, 1.00);border-left: 2pt solid rgba(0, 0, 0, 1.00);border-right: 2pt solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-c9a80494{width:0.75in;background-color:transparent;vertical-align: middle;border-bottom: 2pt solid rgba(0, 0, 0, 1.00);border-top: 1pt solid rgba(0, 0, 0, 1.00);border-left: 2pt solid rgba(0, 0, 0, 1.00);border-right: 1pt solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-c9a80495{width:0.75in;background-color:transparent;vertical-align: middle;border-bottom: 2pt solid rgba(0, 0, 0, 1.00);border-top: 1pt solid rgba(0, 0, 0, 1.00);border-left: 1pt solid rgba(0, 0, 0, 1.00);border-right: 1pt solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-c9a80496{width:0.75in;background-color:transparent;vertical-align: middle;border-bottom: 2pt solid rgba(0, 0, 0, 1.00);border-top: 1pt solid rgba(0, 0, 0, 1.00);border-left: 1pt solid rgba(0, 0, 0, 1.00);border-right: 2pt solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}IndexColumn 1Column 2Column 3Column 4Column 5Row 123456Row 234567Row 345678Row 456789 This reflects nested for loops of (5*(row-1))+column .cl-c9b8ab6e{}.cl-c9b41a54{font-family:'Helvetica';font-size:11pt;font-weight:normal;font-style:normal;text-decoration:none;color:rgba(0, 0, 0, 1.00);background-color:transparent;}.cl-c9b6362c{margin:0;text-align:center;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);padding-bottom:5pt;padding-top:5pt;padding-left:5pt;padding-right:5pt;line-height: 1;background-color:transparent;}.cl-c9b6478e{width:0.75in;background-color:rgba(229, 229, 229, 1.00);vertical-align: middle;border-bottom: 2pt solid rgba(0, 0, 0, 1.00);border-top: 2pt solid rgba(0, 0, 0, 1.00);border-left: 2pt solid rgba(0, 0, 0, 1.00);border-right: 2pt solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-c9b64798{width:0.75in;background-color:rgba(229, 229, 229, 1.00);vertical-align: middle;border-bottom: 2pt solid rgba(0, 0, 0, 1.00);border-top: 2pt solid rgba(0, 0, 0, 1.00);border-left: 2pt solid rgba(0, 0, 0, 1.00);border-right: 1pt solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-c9b647a2{width:0.75in;background-color:rgba(229, 229, 229, 1.00);vertical-align: middle;border-bottom: 2pt solid rgba(0, 0, 0, 1.00);border-top: 2pt solid rgba(0, 0, 0, 1.00);border-left: 1pt solid rgba(0, 0, 0, 1.00);border-right: 1pt solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-c9b647a3{width:0.75in;background-color:rgba(229, 229, 229, 1.00);vertical-align: middle;border-bottom: 2pt solid rgba(0, 0, 0, 1.00);border-top: 2pt solid rgba(0, 0, 0, 1.00);border-left: 1pt solid rgba(0, 0, 0, 1.00);border-right: 2pt solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-c9b647a4{width:0.75in;background-color:rgba(229, 229, 229, 1.00);vertical-align: middle;border-bottom: 1pt solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 2pt solid rgba(0, 0, 0, 1.00);border-right: 2pt solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-c9b647ac{width:0.75in;background-color:transparent;vertical-align: middle;border-bottom: 1pt solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 2pt solid rgba(0, 0, 0, 1.00);border-right: 1pt solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-c9b647b6{width:0.75in;background-color:transparent;vertical-align: middle;border-bottom: 1pt solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 1pt solid rgba(0, 0, 0, 1.00);border-right: 1pt solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-c9b647b7{width:0.75in;background-color:transparent;vertical-align: middle;border-bottom: 1pt solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 1pt solid rgba(0, 0, 0, 1.00);border-right: 2pt solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-c9b647b8{width:0.75in;background-color:rgba(229, 229, 229, 1.00);vertical-align: middle;border-bottom: 1pt solid rgba(0, 0, 0, 1.00);border-top: 1pt solid rgba(0, 0, 0, 1.00);border-left: 2pt solid rgba(0, 0, 0, 1.00);border-right: 2pt solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-c9b647c0{width:0.75in;background-color:transparent;vertical-align: middle;border-bottom: 1pt solid rgba(0, 0, 0, 1.00);border-top: 1pt solid rgba(0, 0, 0, 1.00);border-left: 2pt solid rgba(0, 0, 0, 1.00);border-right: 1pt solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-c9b647c1{width:0.75in;background-color:transparent;vertical-align: middle;border-bottom: 1pt solid rgba(0, 0, 0, 1.00);border-top: 1pt solid rgba(0, 0, 0, 1.00);border-left: 1pt solid rgba(0, 0, 0, 1.00);border-right: 1pt solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-c9b647ca{width:0.75in;background-color:transparent;vertical-align: middle;border-bottom: 1pt solid rgba(0, 0, 0, 1.00);border-top: 1pt solid rgba(0, 0, 0, 1.00);border-left: 1pt solid rgba(0, 0, 0, 1.00);border-right: 2pt solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-c9b647cb{width:0.75in;background-color:rgba(229, 229, 229, 1.00);vertical-align: middle;border-bottom: 2pt solid rgba(0, 0, 0, 1.00);border-top: 1pt solid rgba(0, 0, 0, 1.00);border-left: 2pt solid rgba(0, 0, 0, 1.00);border-right: 2pt solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-c9b647cc{width:0.75in;background-color:transparent;vertical-align: middle;border-bottom: 2pt solid rgba(0, 0, 0, 1.00);border-top: 1pt solid rgba(0, 0, 0, 1.00);border-left: 2pt solid rgba(0, 0, 0, 1.00);border-right: 1pt solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-c9b647d4{width:0.75in;background-color:transparent;vertical-align: middle;border-bottom: 2pt solid rgba(0, 0, 0, 1.00);border-top: 1pt solid rgba(0, 0, 0, 1.00);border-left: 1pt solid rgba(0, 0, 0, 1.00);border-right: 1pt solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-c9b647d5{width:0.75in;background-color:transparent;vertical-align: middle;border-bottom: 2pt solid rgba(0, 0, 0, 1.00);border-top: 1pt solid rgba(0, 0, 0, 1.00);border-left: 1pt solid rgba(0, 0, 0, 1.00);border-right: 2pt solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}IndexColumn 1Column 2Column 3Column 4Column 5Row 112345Row 2678910Row 31112131415Row 41617181920Row 52122232425 "],["resources.html", "Chapter 13 Resources", " Chapter 13 Resources Here’s a list of resources, cheat sheets, reference materials, and stuff we really like and recommend. Introduction to Programming Logic (Lynne O’Hanlon 2000) References Lynne O’Hanlon. 2000. Introduction to Computer Programming Logic. Kendall/Hunt Pub. Co. http://archive.org/details/introductiontoco0000lynn_03ed. "],["bd-demo-intro.html", "Chapter 14 BD Demo Introduction 14.1 Keeping this below for easy reference while we get used to the bookdown format", " Chapter 14 BD Demo Introduction Bookdown reference: https://bookdown.org/yihui/bookdown/usage.html You can label chapter and section titles using {#label} after them, e.g., we can reference Chapter 2. If you do not manually label them, there will be automatic labels anyway, e.g., Chapter 15. Figures and tables with captions will be placed in figure and table environments, respectively. {r nice-fig, fig.cap=‘Here is a nice figure!’, out.width=‘80%’, fig.asp=.75, fig.align=‘center’} par(mar = c(4, 4, .1, .1)) plot(pressure, type = &#39;b&#39;, pch = 19) Reference a figure by its code chunk label with the fig: prefix, e.g., see Figure \\@ref(fig:nice-fig). Similarly, you can reference tables generated from knitr::kable(), e.g., see Table \\@ref(tab:nice-tab). Kat’s note: This is not a nice table. Flextables are better. {r nice-tab, tidy=FALSE} knitr::kable( head(iris, 20), caption = &#39;Here is a nice table!&#39;, booktabs = TRUE ) You can write citations, too. For example, we are using the bookdown package [@R-bookdown] in this sample book, which was built on top of R Markdown and knitr [@xie2015]. 14.1 Keeping this below for easy reference while we get used to the bookdown format Prerequisites This is a sample book written in Markdown. You can use anything that Pandoc’s Markdown supports, e.g., a math equation \\(a^2 + b^2 = c^2\\). The bookdown package can be installed from CRAN or Github: {r eval=FALSE} install.packages(&quot;bookdown&quot;) # or the development version # devtools::install_github(&quot;rstudio/bookdown&quot;) Remember each Rmd file contains one and only one chapter, and a chapter is defined by the first-level heading #. To compile this example to PDF, you need XeLaTeX. You are recommended to install TinyTeX (which includes XeLaTeX): https://yihui.org/tinytex/. {r include=FALSE} # automatically create a bib database for R packages knitr::write_bib(c( .packages(), &#39;bookdown&#39;, &#39;knitr&#39;, &#39;rmarkdown&#39; ), &#39;packages.bib&#39;) "],["bd-demo-methods.html", "Chapter 15 BD Demo Methods 15.1 math example", " Chapter 15 BD Demo Methods We describe our methods in this chapter. Math can be added in body using usual syntax like this 15.1 math example \\(p\\) is unknown but expected to be around 1/3. Standard error will be approximated \\[ SE = \\sqrt{\\frac{p(1-p)}{n}} \\approx \\sqrt{\\frac{1/3 (1 - 1/3)} {300}} = 0.027 \\] You can also use math in footnotes like this1. We will approximate standard error to 0.0272 where we mention \\(p = \\frac{a}{b}\\)↩︎ \\(p\\) is unknown but expected to be around 1/3. Standard error will be approximated \\[ SE = \\sqrt{\\frac{p(1-p)}{n}} \\approx \\sqrt{\\frac{1/3 (1 - 1/3)} {300}} = 0.027 \\]↩︎ "],["references.html", "References", " References references must be in file order preceding this file in order to render Lynne O’Hanlon. 2000. Introduction to Computer Programming Logic. Kendall/Hunt Pub. Co. http://archive.org/details/introductiontoco0000lynn_03ed. Silva, Pedro, and Andr Maral. 2013. “Leaf.” UCI Machine Learning Repository. https://doi.org/10.24432/C53C78. "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
